using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Security;
using System.Security.Permissions;
using System.Text;

namespace System.ComponentModel;

/// <summary>Throws an exception for a Win32 error code.</summary>
[Serializable]
[SuppressUnmanagedCodeSecurity]
[HostProtection(SecurityAction.LinkDemand, SharedState = true)]
public class Win32Exception : ExternalException, ISerializable
{
	private readonly int nativeErrorCode;

	private static bool s_ErrorMessagesInitialized = false;

	private static Dictionary<int, string> s_ErrorMessage = new Dictionary<int, string>();

	/// <summary>Gets the Win32 error code associated with this exception.</summary>
	/// <returns>The Win32 error code associated with this exception.</returns>
	public int NativeErrorCode => nativeErrorCode;

	/// <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the last Win32 error that occurred.</summary>
	[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
	public Win32Exception()
		: this(Marshal.GetLastWin32Error())
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified error.</summary>
	/// <param name="error">The Win32 error code associated with this exception. </param>
	[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
	public Win32Exception(int error)
		: this(error, GetErrorMessage(error))
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified error and the specified detailed description.</summary>
	/// <param name="error">The Win32 error code associated with this exception. </param>
	/// <param name="message">A detailed description of the error. </param>
	[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
	public Win32Exception(int error, string message)
		: base(message)
	{
		nativeErrorCode = error;
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified detailed description. </summary>
	/// <param name="message">A detailed description of the error.</param>
	[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
	public Win32Exception(string message)
		: this(Marshal.GetLastWin32Error(), message)
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified detailed description and the specified exception.</summary>
	/// <param name="message">A detailed description of the error.</param>
	/// <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
	[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
	public Win32Exception(string message, Exception innerException)
		: base(message, innerException)
	{
		nativeErrorCode = Marshal.GetLastWin32Error();
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception" /> class with the specified context and the serialization information.</summary>
	/// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with this exception. </param>
	/// <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that represents the context of this exception. </param>
	protected Win32Exception(SerializationInfo info, StreamingContext context)
		: base(info, context)
	{
		nativeErrorCode = info.GetInt32("NativeErrorCode");
	}

	/// <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the file name and line number at which this <see cref="T:System.ComponentModel.Win32Exception" /> occurred.</summary>
	/// <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
	/// <param name="context">The contextual information about the source or destination.</param>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="info" /> is null.</exception>
	[SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
	public override void GetObjectData(SerializationInfo info, StreamingContext context)
	{
		if (info == null)
		{
			throw new ArgumentNullException("info");
		}
		info.AddValue("NativeErrorCode", nativeErrorCode);
		base.GetObjectData(info, context);
	}

	[DllImport("Kernel32", CharSet = CharSet.Unicode)]
	private static extern int FormatMessage(int dwFlags, IntPtr lpSource, uint dwMessageId, int dwLanguageId, [Out] StringBuilder lpBuffer, int nSize, IntPtr[] arguments);

	internal static string GetErrorMessage(int error)
	{
		if (Environment.IsRunningOnWindows)
		{
			StringBuilder stringBuilder = new StringBuilder(256);
			if (FormatMessage(4608, IntPtr.Zero, (uint)error, 0, stringBuilder, stringBuilder.Capacity, null) == 0)
			{
				return "Error looking up error string";
			}
			return stringBuilder.ToString();
		}
		if (!s_ErrorMessagesInitialized)
		{
			InitializeErrorMessages();
		}
		if (s_ErrorMessage.TryGetValue(error, out var value))
		{
			return value;
		}
		return $"mono-io-layer-error ({error})";
	}

	private static void InitializeErrorMessages()
	{
		if (s_ErrorMessagesInitialized)
		{
			return;
		}
		lock (s_ErrorMessage)
		{
			if (!s_ErrorMessagesInitialized)
			{
				s_ErrorMessage.Add(0, "Success");
				s_ErrorMessage.Add(2, "Cannot find the specified file");
				s_ErrorMessage.Add(3, "Cannot find the specified file");
				s_ErrorMessage.Add(4, "Too many open files");
				s_ErrorMessage.Add(5, "Access denied");
				s_ErrorMessage.Add(6, "Invalid handle");
				s_ErrorMessage.Add(13, "Invalid data");
				s_ErrorMessage.Add(14, "Out of memory");
				s_ErrorMessage.Add(17, "Not same device");
				s_ErrorMessage.Add(18, "No more files");
				s_ErrorMessage.Add(24, "Bad length");
				s_ErrorMessage.Add(31, "General failure");
				s_ErrorMessage.Add(32, "Sharing violation");
				s_ErrorMessage.Add(33, "Lock violation");
				s_ErrorMessage.Add(50, "Operation not supported");
				s_ErrorMessage.Add(55, "Device does not exist");
				s_ErrorMessage.Add(87, "Invalid parameter");
				s_ErrorMessage.Add(120, "Call not implemented");
				s_ErrorMessage.Add(123, "Invalid name");
				s_ErrorMessage.Add(127, "Process not found");
				s_ErrorMessage.Add(183, "Already exists");
				s_ErrorMessage.Add(267, "Is a directory");
				s_ErrorMessage.Add(995, "Operation aborted");
				s_ErrorMessage.Add(6000, "Encryption failed");
				s_ErrorMessage.Add(10004, "interrupted");
				s_ErrorMessage.Add(10009, "Bad file number");
				s_ErrorMessage.Add(10013, "Access denied");
				s_ErrorMessage.Add(10014, "Bad address");
				s_ErrorMessage.Add(10022, "Invalid arguments");
				s_ErrorMessage.Add(10024, "Too many open files");
				s_ErrorMessage.Add(10035, "Operation on non-blocking socket would block");
				s_ErrorMessage.Add(10036, "Operation in progress");
				s_ErrorMessage.Add(10037, "Operation already in progress");
				s_ErrorMessage.Add(10038, "The descriptor is not a socket");
				s_ErrorMessage.Add(10039, "Destination address required");
				s_ErrorMessage.Add(10040, "Message too long");
				s_ErrorMessage.Add(10041, "Protocol wrong type for socket");
				s_ErrorMessage.Add(10042, "Protocol option not supported");
				s_ErrorMessage.Add(10043, "Protocol not supported");
				s_ErrorMessage.Add(10044, "Socket not supported");
				s_ErrorMessage.Add(10045, "Operation not supported");
				s_ErrorMessage.Add(10046, "Protocol family not supported");
				s_ErrorMessage.Add(10047, "An address incompatible with the requested protocol was used");
				s_ErrorMessage.Add(10048, "Address already in use");
				s_ErrorMessage.Add(10049, "The requested address is not valid in this context");
				s_ErrorMessage.Add(10050, "Network subsystem is down");
				s_ErrorMessage.Add(10051, "Network is unreachable");
				s_ErrorMessage.Add(10052, "Connection broken, keep-alive detected a problem");
				s_ErrorMessage.Add(10053, "An established connection was aborted in your host machine.");
				s_ErrorMessage.Add(10054, "Connection reset by peer");
				s_ErrorMessage.Add(10055, "Not enough buffer space is available");
				s_ErrorMessage.Add(10056, "Socket is already connected");
				s_ErrorMessage.Add(10057, "The socket is not connected");
				s_ErrorMessage.Add(10058, "The socket has been shut down");
				s_ErrorMessage.Add(10059, "Too many references: cannot splice");
				s_ErrorMessage.Add(10060, "Connection timed out");
				s_ErrorMessage.Add(10061, "Connection refused");
				s_ErrorMessage.Add(10062, "Too many symbolic links encountered");
				s_ErrorMessage.Add(10063, "File name too long");
				s_ErrorMessage.Add(10064, "Host is down");
				s_ErrorMessage.Add(10065, "No route to host");
				s_ErrorMessage.Add(10066, "Directory not empty");
				s_ErrorMessage.Add(10067, "EPROCLIM");
				s_ErrorMessage.Add(10068, "Too many users");
				s_ErrorMessage.Add(10069, "Quota exceeded");
				s_ErrorMessage.Add(10070, "Stale NFS file handle");
				s_ErrorMessage.Add(10071, "Object is remote");
				s_ErrorMessage.Add(10091, "SYSNOTREADY");
				s_ErrorMessage.Add(10092, "VERNOTSUPPORTED");
				s_ErrorMessage.Add(10093, "Winsock not initialised");
				s_ErrorMessage.Add(10101, "EDISCON");
				s_ErrorMessage.Add(10102, "ENOMORE");
				s_ErrorMessage.Add(10103, "Operation canceled");
				s_ErrorMessage.Add(10104, "EINVALIDPROCTABLE");
				s_ErrorMessage.Add(10105, "EINVALIDPROVIDER");
				s_ErrorMessage.Add(10106, "EPROVIDERFAILEDINIT");
				s_ErrorMessage.Add(10107, "System call failed");
				s_ErrorMessage.Add(10108, "SERVICE_NOT_FOUND");
				s_ErrorMessage.Add(10109, "TYPE_NOT_FOUND");
				s_ErrorMessage.Add(10112, "EREFUSED");
				s_ErrorMessage.Add(11001, "No such host is known");
				s_ErrorMessage.Add(11002, "A temporary error occurred on an authoritative name server.  Try again later.");
				s_ErrorMessage.Add(11003, "No recovery");
				s_ErrorMessage.Add(11004, "No data");
				s_ErrorMessage.Add(1, "Invalid function");
				s_ErrorMessage.Add(7, "Arena trashed");
				s_ErrorMessage.Add(8, "Not enough memory");
				s_ErrorMessage.Add(9, "Invalid block");
				s_ErrorMessage.Add(10, "Bad environment");
				s_ErrorMessage.Add(11, "Bad format");
				s_ErrorMessage.Add(12, "Invalid access");
				s_ErrorMessage.Add(15, "Invalid drive");
				s_ErrorMessage.Add(16, "Current directory");
				s_ErrorMessage.Add(19, "Write protect");
				s_ErrorMessage.Add(20, "Bad unit");
				s_ErrorMessage.Add(21, "Not ready");
				s_ErrorMessage.Add(22, "Bad command");
				s_ErrorMessage.Add(23, "CRC");
				s_ErrorMessage.Add(25, "Seek");
				s_ErrorMessage.Add(26, "Not DOS disk");
				s_ErrorMessage.Add(27, "Sector not found");
				s_ErrorMessage.Add(28, "Out of paper");
				s_ErrorMessage.Add(29, "Write fault");
				s_ErrorMessage.Add(30, "Read fault");
				s_ErrorMessage.Add(34, "Wrong disk");
				s_ErrorMessage.Add(36, "Sharing buffer exceeded");
				s_ErrorMessage.Add(38, "Handle EOF");
				s_ErrorMessage.Add(39, "Handle disk full");
				s_ErrorMessage.Add(51, "Rem not list");
				s_ErrorMessage.Add(52, "Duplicate name");
				s_ErrorMessage.Add(53, "Bad netpath");
				s_ErrorMessage.Add(54, "Network busy");
				s_ErrorMessage.Add(56, "Too many commands");
				s_ErrorMessage.Add(57, "ADAP HDW error");
				s_ErrorMessage.Add(58, "Bad net response");
				s_ErrorMessage.Add(59, "Unexpected net error");
				s_ErrorMessage.Add(60, "Bad rem adap");
				s_ErrorMessage.Add(61, "Print queue full");
				s_ErrorMessage.Add(62, "No spool space");
				s_ErrorMessage.Add(63, "Print cancelled");
				s_ErrorMessage.Add(64, "Netname deleted");
				s_ErrorMessage.Add(65, "Network access denied");
				s_ErrorMessage.Add(66, "Bad device type");
				s_ErrorMessage.Add(67, "Bad net name");
				s_ErrorMessage.Add(68, "Too many names");
				s_ErrorMessage.Add(69, "Too many sessions");
				s_ErrorMessage.Add(70, "Sharing paused");
				s_ErrorMessage.Add(71, "Req not accep");
				s_ErrorMessage.Add(72, "Redir paused");
				s_ErrorMessage.Add(80, "File exists");
				s_ErrorMessage.Add(82, "Cannot make");
				s_ErrorMessage.Add(83, "Fail i24");
				s_ErrorMessage.Add(84, "Out of structures");
				s_ErrorMessage.Add(85, "Already assigned");
				s_ErrorMessage.Add(86, "Invalid password");
				s_ErrorMessage.Add(88, "Net write fault");
				s_ErrorMessage.Add(89, "No proc slots");
				s_ErrorMessage.Add(100, "Too many semaphores");
				s_ErrorMessage.Add(101, "Exclusive semaphore already owned");
				s_ErrorMessage.Add(102, "Semaphore is set");
				s_ErrorMessage.Add(103, "Too many semaphore requests");
				s_ErrorMessage.Add(104, "Invalid at interrupt time");
				s_ErrorMessage.Add(105, "Semaphore owner died");
				s_ErrorMessage.Add(106, "Semaphore user limit");
				s_ErrorMessage.Add(107, "Disk change");
				s_ErrorMessage.Add(108, "Drive locked");
				s_ErrorMessage.Add(109, "Broken pipe");
				s_ErrorMessage.Add(110, "Open failed");
				s_ErrorMessage.Add(111, "Buffer overflow");
				s_ErrorMessage.Add(112, "Disk full");
				s_ErrorMessage.Add(113, "No more search handles");
				s_ErrorMessage.Add(114, "Invalid target handle");
				s_ErrorMessage.Add(117, "Invalid category");
				s_ErrorMessage.Add(118, "Invalid verify switch");
				s_ErrorMessage.Add(119, "Bad driver level");
				s_ErrorMessage.Add(121, "Semaphore timeout");
				s_ErrorMessage.Add(122, "Insufficient buffer");
				s_ErrorMessage.Add(124, "Invalid level");
				s_ErrorMessage.Add(125, "No volume label");
				s_ErrorMessage.Add(126, "Module not found");
				s_ErrorMessage.Add(128, "Wait no children");
				s_ErrorMessage.Add(129, "Child not complete");
				s_ErrorMessage.Add(130, "Direct access handle");
				s_ErrorMessage.Add(131, "Negative seek");
				s_ErrorMessage.Add(132, "Seek on device");
				s_ErrorMessage.Add(133, "Is join target");
				s_ErrorMessage.Add(134, "Is joined");
				s_ErrorMessage.Add(135, "Is substed");
				s_ErrorMessage.Add(136, "Not joined");
				s_ErrorMessage.Add(137, "Not substed");
				s_ErrorMessage.Add(138, "Join to join");
				s_ErrorMessage.Add(139, "Subst to subst");
				s_ErrorMessage.Add(140, "Join to subst");
				s_ErrorMessage.Add(141, "Subst to join");
				s_ErrorMessage.Add(142, "Busy drive");
				s_ErrorMessage.Add(143, "Same drive");
				s_ErrorMessage.Add(144, "Directory not root");
				s_ErrorMessage.Add(145, "Directory not empty");
				s_ErrorMessage.Add(146, "Is subst path");
				s_ErrorMessage.Add(147, "Is join path");
				s_ErrorMessage.Add(148, "Path busy");
				s_ErrorMessage.Add(149, "Is subst target");
				s_ErrorMessage.Add(150, "System trace");
				s_ErrorMessage.Add(151, "Invalid event count");
				s_ErrorMessage.Add(152, "Too many muxwaiters");
				s_ErrorMessage.Add(153, "Invalid list format");
				s_ErrorMessage.Add(154, "Label too long");
				s_ErrorMessage.Add(155, "Too many TCBs");
				s_ErrorMessage.Add(156, "Signal refused");
				s_ErrorMessage.Add(157, "Discarded");
				s_ErrorMessage.Add(158, "Not locked");
				s_ErrorMessage.Add(159, "Bad thread ID addr");
				s_ErrorMessage.Add(160, "Bad arguments");
				s_ErrorMessage.Add(161, "Bad pathname");
				s_ErrorMessage.Add(162, "Signal pending");
				s_ErrorMessage.Add(164, "Max thrds reached");
				s_ErrorMessage.Add(167, "Lock failed");
				s_ErrorMessage.Add(170, "Busy");
				s_ErrorMessage.Add(173, "Cancel violation");
				s_ErrorMessage.Add(174, "Atomic locks not supported");
				s_ErrorMessage.Add(180, "Invalid segment number");
				s_ErrorMessage.Add(182, "Invalid ordinal");
				s_ErrorMessage.Add(186, "Invalid flag number");
				s_ErrorMessage.Add(187, "Sem not found");
				s_ErrorMessage.Add(188, "Invalid starting codeseg");
				s_ErrorMessage.Add(189, "Invalid stackseg");
				s_ErrorMessage.Add(190, "Invalid moduletype");
				s_ErrorMessage.Add(191, "Invalid exe signature");
				s_ErrorMessage.Add(192, "Exe marked invalid");
				s_ErrorMessage.Add(193, "Bad exe format");
				s_ErrorMessage.Add(194, "Iterated data exceeds 64k (and that should be enough for anybody!)");
				s_ErrorMessage.Add(195, "Invalid minallocsize");
				s_ErrorMessage.Add(196, "Dynlink from invalid ring");
				s_ErrorMessage.Add(197, "IOPL not enabled");
				s_ErrorMessage.Add(198, "Invalid segdpl");
				s_ErrorMessage.Add(199, "Autodataseg exceeds 64k");
				s_ErrorMessage.Add(200, "Ring2seg must be movable");
				s_ErrorMessage.Add(201, "Reloc chain exceeds seglim");
				s_ErrorMessage.Add(202, "Infloop in reloc chain");
				s_ErrorMessage.Add(203, "Env var not found");
				s_ErrorMessage.Add(205, "No signal sent");
				s_ErrorMessage.Add(206, "Filename exceeds range");
				s_ErrorMessage.Add(207, "Ring2 stack in use");
				s_ErrorMessage.Add(208, "Meta expansion too long");
				s_ErrorMessage.Add(209, "Invalid signal number");
				s_ErrorMessage.Add(210, "Thread 1 inactive");
				s_ErrorMessage.Add(212, "Locked");
				s_ErrorMessage.Add(214, "Too many modules");
				s_ErrorMessage.Add(215, "Nesting not allowed");
				s_ErrorMessage.Add(216, "Exe machine type mismatch");
				s_ErrorMessage.Add(230, "Bad pipe");
				s_ErrorMessage.Add(231, "Pipe busy");
				s_ErrorMessage.Add(232, "No data");
				s_ErrorMessage.Add(233, "Pipe not connected");
				s_ErrorMessage.Add(234, "More data");
				s_ErrorMessage.Add(240, "VC disconnected");
				s_ErrorMessage.Add(254, "Invalid EA name");
				s_ErrorMessage.Add(255, "EA list inconsistent");
				s_ErrorMessage.Add(258, "Wait timeout");
				s_ErrorMessage.Add(259, "No more items");
				s_ErrorMessage.Add(266, "Cannot copy");
				s_ErrorMessage.Add(275, "EAS didnt fit");
				s_ErrorMessage.Add(276, "EA file corrupt");
				s_ErrorMessage.Add(277, "EA table full");
				s_ErrorMessage.Add(278, "Invalid EA handle");
				s_ErrorMessage.Add(282, "EAs not supported");
				s_ErrorMessage.Add(288, "Not owner");
				s_ErrorMessage.Add(298, "Too many posts");
				s_ErrorMessage.Add(299, "Partial copy");
				s_ErrorMessage.Add(300, "Oplock not granted");
				s_ErrorMessage.Add(301, "Invalid oplock protocol");
				s_ErrorMessage.Add(302, "Disk too fragmented");
				s_ErrorMessage.Add(303, "Delete pending");
				s_ErrorMessage.Add(317, "Mr Mid not found");
				s_ErrorMessage.Add(487, "Invalid address");
				s_ErrorMessage.Add(534, "Arithmetic overflow");
				s_ErrorMessage.Add(535, "Pipe connected");
				s_ErrorMessage.Add(536, "Pipe listening");
				s_ErrorMessage.Add(994, "EA access denied");
				s_ErrorMessage.Add(996, "IO incomplete");
				s_ErrorMessage.Add(997, "IO pending");
				s_ErrorMessage.Add(998, "No access");
				s_ErrorMessage.Add(999, "Swap error");
				s_ErrorMessage.Add(1001, "Stack overflow");
				s_ErrorMessage.Add(1002, "Invalid message");
				s_ErrorMessage.Add(1003, "Can not complete");
				s_ErrorMessage.Add(1004, "Invalid flags");
				s_ErrorMessage.Add(1005, "Unrecognised volume");
				s_ErrorMessage.Add(1006, "File invalid");
				s_ErrorMessage.Add(1007, "Full screen mode");
				s_ErrorMessage.Add(1008, "No token");
				s_ErrorMessage.Add(1009, "Bad DB");
				s_ErrorMessage.Add(1010, "Bad key");
				s_ErrorMessage.Add(1011, "Can't open");
				s_ErrorMessage.Add(1012, "Can't read");
				s_ErrorMessage.Add(1013, "Can't write");
				s_ErrorMessage.Add(1014, "Registry recovered");
				s_ErrorMessage.Add(1015, "Registry corrupt");
				s_ErrorMessage.Add(1016, "Registry IO failed");
				s_ErrorMessage.Add(1017, "Not registry file");
				s_ErrorMessage.Add(1018, "Key deleted");
				s_ErrorMessage.Add(1019, "No log space");
				s_ErrorMessage.Add(1020, "Key has children");
				s_ErrorMessage.Add(1021, "Child must be volatile");
				s_ErrorMessage.Add(1022, "Notify enum dir");
				s_ErrorMessage.Add(1051, "Dependent services running");
				s_ErrorMessage.Add(1052, "Invalid service control");
				s_ErrorMessage.Add(1053, "Service request timeout");
				s_ErrorMessage.Add(1054, "Service no thread");
				s_ErrorMessage.Add(1055, "Service database locked");
				s_ErrorMessage.Add(1056, "Service already running");
				s_ErrorMessage.Add(1057, "Invalid service account");
				s_ErrorMessage.Add(1058, "Service disabled");
				s_ErrorMessage.Add(1059, "Circular dependency");
				s_ErrorMessage.Add(1060, "Service does not exist");
				s_ErrorMessage.Add(1061, "Service cannot accept ctrl");
				s_ErrorMessage.Add(1062, "Service not active");
				s_ErrorMessage.Add(1063, "Failed service controller connect");
				s_ErrorMessage.Add(1064, "Exception in service");
				s_ErrorMessage.Add(1065, "Database does not exist");
				s_ErrorMessage.Add(1066, "Service specific error");
				s_ErrorMessage.Add(1067, "Process aborted");
				s_ErrorMessage.Add(1068, "Service dependency fail");
				s_ErrorMessage.Add(1069, "Service logon failed");
				s_ErrorMessage.Add(1070, "Service start hang");
				s_ErrorMessage.Add(1071, "Invalid service lock");
				s_ErrorMessage.Add(1072, "Service marked for delete");
				s_ErrorMessage.Add(1073, "Service exists");
				s_ErrorMessage.Add(1074, "Already running lkg");
				s_ErrorMessage.Add(1075, "Service dependency deleted");
				s_ErrorMessage.Add(1076, "Boot already accepted");
				s_ErrorMessage.Add(1077, "Service never started");
				s_ErrorMessage.Add(1078, "Duplicate service name");
				s_ErrorMessage.Add(1079, "Different service account");
				s_ErrorMessage.Add(1080, "Cannot detect driver failure");
				s_ErrorMessage.Add(1081, "Cannot detect process abort");
				s_ErrorMessage.Add(1082, "No recovery program");
				s_ErrorMessage.Add(1083, "Service not in exe");
				s_ErrorMessage.Add(1084, "Not safeboot service");
				s_ErrorMessage.Add(1100, "End of media");
				s_ErrorMessage.Add(1101, "Filemark detected");
				s_ErrorMessage.Add(1102, "Beginning of media");
				s_ErrorMessage.Add(1103, "Setmark detected");
				s_ErrorMessage.Add(1104, "No data detected");
				s_ErrorMessage.Add(1105, "Partition failure");
				s_ErrorMessage.Add(1106, "Invalid block length");
				s_ErrorMessage.Add(1107, "Device not partitioned");
				s_ErrorMessage.Add(1108, "Unable to lock media");
				s_ErrorMessage.Add(1109, "Unable to unload media");
				s_ErrorMessage.Add(1110, "Media changed");
				s_ErrorMessage.Add(1111, "Bus reset");
				s_ErrorMessage.Add(1112, "No media in drive");
				s_ErrorMessage.Add(1113, "No unicode translation");
				s_ErrorMessage.Add(1114, "DLL init failed");
				s_ErrorMessage.Add(1115, "Shutdown in progress");
				s_ErrorMessage.Add(1116, "No shutdown in progress");
				s_ErrorMessage.Add(1117, "IO device");
				s_ErrorMessage.Add(1118, "Serial IO device");
				s_ErrorMessage.Add(1119, "IRQ busy");
				s_ErrorMessage.Add(1120, "More writes");
				s_ErrorMessage.Add(1121, "Counter timeout");
				s_ErrorMessage.Add(1122, "Floppy ID mark not found");
				s_ErrorMessage.Add(1123, "Floppy wrong cylinder");
				s_ErrorMessage.Add(1124, "Floppy unknown error");
				s_ErrorMessage.Add(1125, "Floppy bad registers");
				s_ErrorMessage.Add(1126, "Disk recalibrate failed");
				s_ErrorMessage.Add(1127, "Disk operation failed");
				s_ErrorMessage.Add(1128, "Disk reset failed");
				s_ErrorMessage.Add(1129, "EOM overflow");
				s_ErrorMessage.Add(1130, "Not enough server memory");
				s_ErrorMessage.Add(1131, "Possible deadlock");
				s_ErrorMessage.Add(1132, "Mapped alignment");
				s_ErrorMessage.Add(1140, "Set power state vetoed");
				s_ErrorMessage.Add(1141, "Set power state failed");
				s_ErrorMessage.Add(1142, "Too many links");
				s_ErrorMessage.Add(1150, "Old win version");
				s_ErrorMessage.Add(1151, "App wrong OS");
				s_ErrorMessage.Add(1152, "Single instance app");
				s_ErrorMessage.Add(1153, "Rmode app");
				s_ErrorMessage.Add(1154, "Invalid DLL");
				s_ErrorMessage.Add(1155, "No association");
				s_ErrorMessage.Add(1156, "DDE fail");
				s_ErrorMessage.Add(1157, "DLL not found");
				s_ErrorMessage.Add(1158, "No more user handles");
				s_ErrorMessage.Add(1159, "Message sync only");
				s_ErrorMessage.Add(1160, "Source element empty");
				s_ErrorMessage.Add(1161, "Destination element full");
				s_ErrorMessage.Add(1162, "Illegal element address");
				s_ErrorMessage.Add(1163, "Magazine not present");
				s_ErrorMessage.Add(1164, "Device reinitialization needed");
				s_ErrorMessage.Add(1165, "Device requires cleaning");
				s_ErrorMessage.Add(1166, "Device door open");
				s_ErrorMessage.Add(1167, "Device not connected");
				s_ErrorMessage.Add(1168, "Not found");
				s_ErrorMessage.Add(1169, "No match");
				s_ErrorMessage.Add(1170, "Set not found");
				s_ErrorMessage.Add(1171, "Point not found");
				s_ErrorMessage.Add(1172, "No tracking service");
				s_ErrorMessage.Add(1173, "No volume ID");
				s_ErrorMessage.Add(1175, "Unable to remove replaced");
				s_ErrorMessage.Add(1176, "Unable to move replacement");
				s_ErrorMessage.Add(1177, "Unable to move replacement 2");
				s_ErrorMessage.Add(1178, "Journal delete in progress");
				s_ErrorMessage.Add(1179, "Journal not active");
				s_ErrorMessage.Add(1180, "Potential file found");
				s_ErrorMessage.Add(1181, "Journal entry deleted");
				s_ErrorMessage.Add(1200, "Bad device");
				s_ErrorMessage.Add(1201, "Connection unavail");
				s_ErrorMessage.Add(1202, "Device already remembered");
				s_ErrorMessage.Add(1203, "No net or bad path");
				s_ErrorMessage.Add(1204, "Bad provider");
				s_ErrorMessage.Add(1205, "Cannot open profile");
				s_ErrorMessage.Add(1206, "Bad profile");
				s_ErrorMessage.Add(1207, "Not container");
				s_ErrorMessage.Add(1208, "Extended error");
				s_ErrorMessage.Add(1209, "Invalid group name");
				s_ErrorMessage.Add(1210, "Invalid computer name");
				s_ErrorMessage.Add(1211, "Invalid event name");
				s_ErrorMessage.Add(1212, "Invalid domain name");
				s_ErrorMessage.Add(1213, "Invalid service name");
				s_ErrorMessage.Add(1214, "Invalid net name");
				s_ErrorMessage.Add(1215, "Invalid share name");
				s_ErrorMessage.Add(1216, "Invalid password name");
				s_ErrorMessage.Add(1217, "Invalid message name");
				s_ErrorMessage.Add(1218, "Invalid message dest");
				s_ErrorMessage.Add(1219, "Session credential conflict");
				s_ErrorMessage.Add(1220, "Remote session limit exceeded");
				s_ErrorMessage.Add(1221, "Dup domain name");
				s_ErrorMessage.Add(1222, "No network");
				s_ErrorMessage.Add(1223, "Cancelled");
				s_ErrorMessage.Add(1224, "User mapped file");
				s_ErrorMessage.Add(1225, "Connection refused");
				s_ErrorMessage.Add(1226, "Graceful disconnect");
				s_ErrorMessage.Add(1227, "Address already associated");
				s_ErrorMessage.Add(1228, "Address not associated");
				s_ErrorMessage.Add(1229, "Connected invalid");
				s_ErrorMessage.Add(1230, "Connection active");
				s_ErrorMessage.Add(1231, "Network unreachable");
				s_ErrorMessage.Add(1232, "Host unreachable");
				s_ErrorMessage.Add(1233, "Protocol unreachable");
				s_ErrorMessage.Add(1234, "Port unreachable");
				s_ErrorMessage.Add(1235, "Request aborted");
				s_ErrorMessage.Add(1236, "Connection aborted");
				s_ErrorMessage.Add(1237, "Retry");
				s_ErrorMessage.Add(1238, "Connection count limit");
				s_ErrorMessage.Add(1239, "Login time restriction");
				s_ErrorMessage.Add(1240, "Login wksta restriction");
				s_ErrorMessage.Add(1241, "Incorrect address");
				s_ErrorMessage.Add(1242, "Already registered");
				s_ErrorMessage.Add(1243, "Service not found");
				s_ErrorMessage.Add(1244, "Not authenticated");
				s_ErrorMessage.Add(1245, "Not logged on");
				s_ErrorMessage.Add(1246, "Continue");
				s_ErrorMessage.Add(1247, "Already initialised");
				s_ErrorMessage.Add(1248, "No more devices");
				s_ErrorMessage.Add(1249, "No such site");
				s_ErrorMessage.Add(1250, "Domain controller exists");
				s_ErrorMessage.Add(1251, "Only if connected");
				s_ErrorMessage.Add(1252, "Override no changes");
				s_ErrorMessage.Add(1253, "Bad user profile");
				s_ErrorMessage.Add(1254, "Not supported on SBS");
				s_ErrorMessage.Add(1255, "Server shutdown in progress");
				s_ErrorMessage.Add(1256, "Host down");
				s_ErrorMessage.Add(1257, "Non account sid");
				s_ErrorMessage.Add(1258, "Non domain sid");
				s_ErrorMessage.Add(1259, "Apphelp block");
				s_ErrorMessage.Add(1260, "Access disabled by policy");
				s_ErrorMessage.Add(1261, "Reg nat consumption");
				s_ErrorMessage.Add(1262, "CSC share offline");
				s_ErrorMessage.Add(1263, "PK init failure");
				s_ErrorMessage.Add(1264, "Smartcard subsystem failure");
				s_ErrorMessage.Add(1265, "Downgrade detected");
				s_ErrorMessage.Add(1266, "Smartcard cert revoked");
				s_ErrorMessage.Add(1267, "Issuing CA untrusted");
				s_ErrorMessage.Add(1268, "Revocation offline");
				s_ErrorMessage.Add(1269, "PK init client failure");
				s_ErrorMessage.Add(1270, "Smartcard cert expired");
				s_ErrorMessage.Add(1271, "Machine locked");
				s_ErrorMessage.Add(1273, "Callback supplied invalid data");
				s_ErrorMessage.Add(1274, "Sync foreground refresh required");
				s_ErrorMessage.Add(1275, "Driver blocked");
				s_ErrorMessage.Add(1276, "Invalid import of non DLL");
				s_ErrorMessage.Add(1300, "Not all assigned");
				s_ErrorMessage.Add(1301, "Some not mapped");
				s_ErrorMessage.Add(1302, "No quotas for account");
				s_ErrorMessage.Add(1303, "Local user session key");
				s_ErrorMessage.Add(1304, "Null LM password");
				s_ErrorMessage.Add(1305, "Unknown revision");
				s_ErrorMessage.Add(1306, "Revision mismatch");
				s_ErrorMessage.Add(1307, "Invalid owner");
				s_ErrorMessage.Add(1308, "Invalid primary group");
				s_ErrorMessage.Add(1309, "No impersonation token");
				s_ErrorMessage.Add(1310, "Can't disable mandatory");
				s_ErrorMessage.Add(1311, "No logon servers");
				s_ErrorMessage.Add(1312, "No such logon session");
				s_ErrorMessage.Add(1313, "No such privilege");
				s_ErrorMessage.Add(1314, "Privilege not held");
				s_ErrorMessage.Add(1315, "Invalid account name");
				s_ErrorMessage.Add(1316, "User exists");
				s_ErrorMessage.Add(1317, "No such user");
				s_ErrorMessage.Add(1318, "Group exists");
				s_ErrorMessage.Add(1319, "No such group");
				s_ErrorMessage.Add(1320, "Member in group");
				s_ErrorMessage.Add(1321, "Member not in group");
				s_ErrorMessage.Add(1322, "Last admin");
				s_ErrorMessage.Add(1323, "Wrong password");
				s_ErrorMessage.Add(1324, "Ill formed password");
				s_ErrorMessage.Add(1325, "Password restriction");
				s_ErrorMessage.Add(1326, "Logon failure");
				s_ErrorMessage.Add(1327, "Account restriction");
				s_ErrorMessage.Add(1328, "Invalid logon hours");
				s_ErrorMessage.Add(1329, "Invalid workstation");
				s_ErrorMessage.Add(1330, "Password expired");
				s_ErrorMessage.Add(1331, "Account disabled");
				s_ErrorMessage.Add(1332, "None mapped");
				s_ErrorMessage.Add(1333, "Too many LUIDs requested");
				s_ErrorMessage.Add(1334, "LUIDs exhausted");
				s_ErrorMessage.Add(1335, "Invalid sub authority");
				s_ErrorMessage.Add(1336, "Invalid ACL");
				s_ErrorMessage.Add(1337, "Invalid SID");
				s_ErrorMessage.Add(1338, "Invalid security descr");
				s_ErrorMessage.Add(1340, "Bad inheritance ACL");
				s_ErrorMessage.Add(1341, "Server disabled");
				s_ErrorMessage.Add(1342, "Server not disabled");
				s_ErrorMessage.Add(1343, "Invalid ID authority");
				s_ErrorMessage.Add(1344, "Allotted space exceeded");
				s_ErrorMessage.Add(1345, "Invalid group attributes");
				s_ErrorMessage.Add(1346, "Bad impersonation level");
				s_ErrorMessage.Add(1347, "Can't open anonymous");
				s_ErrorMessage.Add(1348, "Bad validation class");
				s_ErrorMessage.Add(1349, "Bad token type");
				s_ErrorMessage.Add(1350, "No security on object");
				s_ErrorMessage.Add(1351, "Can't access domain info");
				s_ErrorMessage.Add(1352, "Invalid server state");
				s_ErrorMessage.Add(1353, "Invalid domain state");
				s_ErrorMessage.Add(1354, "Invalid domain role");
				s_ErrorMessage.Add(1355, "No such domain");
				s_ErrorMessage.Add(1356, "Domain exists");
				s_ErrorMessage.Add(1357, "Domain limit exceeded");
				s_ErrorMessage.Add(1358, "Internal DB corruption");
				s_ErrorMessage.Add(1359, "Internal error");
				s_ErrorMessage.Add(1360, "Generic not mapped");
				s_ErrorMessage.Add(1361, "Bad descriptor format");
				s_ErrorMessage.Add(1362, "Not logon process");
				s_ErrorMessage.Add(1363, "Logon session exists");
				s_ErrorMessage.Add(1364, "No such package");
				s_ErrorMessage.Add(1365, "Bad logon session state");
				s_ErrorMessage.Add(1366, "Logon session collision");
				s_ErrorMessage.Add(1367, "Invalid logon type");
				s_ErrorMessage.Add(1368, "Cannot impersonate");
				s_ErrorMessage.Add(1369, "Rxact invalid state");
				s_ErrorMessage.Add(1370, "Rxact commit failure");
				s_ErrorMessage.Add(1371, "Special account");
				s_ErrorMessage.Add(1372, "Special group");
				s_ErrorMessage.Add(1373, "Special user");
				s_ErrorMessage.Add(1374, "Members primary group");
				s_ErrorMessage.Add(1375, "Token already in use");
				s_ErrorMessage.Add(1376, "No such alias");
				s_ErrorMessage.Add(1377, "Member not in alias");
				s_ErrorMessage.Add(1378, "Member in alias");
				s_ErrorMessage.Add(1379, "Alias exists");
				s_ErrorMessage.Add(1380, "Logon not granted");
				s_ErrorMessage.Add(1381, "Too many secrets");
				s_ErrorMessage.Add(1382, "Secret too long");
				s_ErrorMessage.Add(1383, "Internal DB error");
				s_ErrorMessage.Add(1384, "Too many context IDs");
				s_ErrorMessage.Add(1385, "Logon type not granted");
				s_ErrorMessage.Add(1386, "NT cross encryption required");
				s_ErrorMessage.Add(1387, "No such member");
				s_ErrorMessage.Add(1388, "Invalid member");
				s_ErrorMessage.Add(1389, "Too many SIDs");
				s_ErrorMessage.Add(1390, "LM cross encryption required");
				s_ErrorMessage.Add(1391, "No inheritance");
				s_ErrorMessage.Add(1392, "File corrupt");
				s_ErrorMessage.Add(1393, "Disk corrupt");
				s_ErrorMessage.Add(1394, "No user session key");
				s_ErrorMessage.Add(1395, "Licence quota exceeded");
				s_ErrorMessage.Add(1396, "Wrong target name");
				s_ErrorMessage.Add(1397, "Mutual auth failed");
				s_ErrorMessage.Add(1398, "Time skew");
				s_ErrorMessage.Add(1399, "Current domain not allowed");
				s_ErrorMessage.Add(1400, "Invalid window handle");
				s_ErrorMessage.Add(1401, "Invalid menu handle");
				s_ErrorMessage.Add(1402, "Invalid cursor handle");
				s_ErrorMessage.Add(1403, "Invalid accel handle");
				s_ErrorMessage.Add(1404, "Invalid hook handle");
				s_ErrorMessage.Add(1405, "Invalid DWP handle");
				s_ErrorMessage.Add(1406, "TLW with wschild");
				s_ErrorMessage.Add(1407, "Cannot find WND class");
				s_ErrorMessage.Add(1408, "Window of other thread");
				s_ErrorMessage.Add(1409, "Hotkey already registered");
				s_ErrorMessage.Add(1410, "Class already exists");
				s_ErrorMessage.Add(1411, "Class does not exist");
				s_ErrorMessage.Add(1412, "Class has windows");
				s_ErrorMessage.Add(1413, "Invalid index");
				s_ErrorMessage.Add(1414, "Invalid icon handle");
				s_ErrorMessage.Add(1415, "Private dialog index");
				s_ErrorMessage.Add(1416, "Listbox ID not found");
				s_ErrorMessage.Add(1417, "No wildcard characters");
				s_ErrorMessage.Add(1418, "Clipboard not open");
				s_ErrorMessage.Add(1419, "Hotkey not registered");
				s_ErrorMessage.Add(1420, "Window not dialog");
				s_ErrorMessage.Add(1421, "Control ID not found");
				s_ErrorMessage.Add(1422, "Invalid combobox message");
				s_ErrorMessage.Add(1423, "Window not combobox");
				s_ErrorMessage.Add(1424, "Invalid edit height");
				s_ErrorMessage.Add(1425, "DC not found");
				s_ErrorMessage.Add(1426, "Invalid hook filter");
				s_ErrorMessage.Add(1427, "Invalid filter proc");
				s_ErrorMessage.Add(1428, "Hook needs HMOD");
				s_ErrorMessage.Add(1429, "Global only hook");
				s_ErrorMessage.Add(1430, "Journal hook set");
				s_ErrorMessage.Add(1431, "Hook not installed");
				s_ErrorMessage.Add(1432, "Invalid LB message");
				s_ErrorMessage.Add(1433, "Setcount on bad LB");
				s_ErrorMessage.Add(1434, "LB without tabstops");
				s_ErrorMessage.Add(1435, "Destroy object of other thread");
				s_ErrorMessage.Add(1436, "Child window menu");
				s_ErrorMessage.Add(1437, "No system menu");
				s_ErrorMessage.Add(1438, "Invalid msgbox style");
				s_ErrorMessage.Add(1439, "Invalid SPI value");
				s_ErrorMessage.Add(1440, "Screen already locked");
				s_ErrorMessage.Add(1441, "HWNDs have different parent");
				s_ErrorMessage.Add(1442, "Not child window");
				s_ErrorMessage.Add(1443, "Invalid GW command");
				s_ErrorMessage.Add(1444, "Invalid thread ID");
				s_ErrorMessage.Add(1445, "Non MDI child window");
				s_ErrorMessage.Add(1446, "Popup already active");
				s_ErrorMessage.Add(1447, "No scrollbars");
				s_ErrorMessage.Add(1448, "Invalid scrollbar range");
				s_ErrorMessage.Add(1449, "Invalid showwin command");
				s_ErrorMessage.Add(1450, "No system resources");
				s_ErrorMessage.Add(1451, "Nonpaged system resources");
				s_ErrorMessage.Add(1452, "Paged system resources");
				s_ErrorMessage.Add(1453, "Working set quota");
				s_ErrorMessage.Add(1454, "Pagefile quota");
				s_ErrorMessage.Add(1455, "Commitment limit");
				s_ErrorMessage.Add(1456, "Menu item not found");
				s_ErrorMessage.Add(1457, "Invalid keyboard handle");
				s_ErrorMessage.Add(1458, "Hook type not allowed");
				s_ErrorMessage.Add(1459, "Requires interactive windowstation");
				s_ErrorMessage.Add(1460, "Timeout");
				s_ErrorMessage.Add(1461, "Invalid monitor handle");
				s_ErrorMessage.Add(1500, "Eventlog file corrupt");
				s_ErrorMessage.Add(1501, "Eventlog can't start");
				s_ErrorMessage.Add(1502, "Log file full");
				s_ErrorMessage.Add(1503, "Eventlog file changed");
				s_ErrorMessage.Add(1601, "Install service failure");
				s_ErrorMessage.Add(1602, "Install userexit");
				s_ErrorMessage.Add(1603, "Install failure");
				s_ErrorMessage.Add(1604, "Install suspend");
				s_ErrorMessage.Add(1605, "Unknown product");
				s_ErrorMessage.Add(1606, "Unknown feature");
				s_ErrorMessage.Add(1607, "Unknown component");
				s_ErrorMessage.Add(1608, "Unknown property");
				s_ErrorMessage.Add(1609, "Invalid handle state");
				s_ErrorMessage.Add(1610, "Bad configuration");
				s_ErrorMessage.Add(1611, "Index absent");
				s_ErrorMessage.Add(1612, "Install source absent");
				s_ErrorMessage.Add(1613, "Install package version");
				s_ErrorMessage.Add(1614, "Product uninstalled");
				s_ErrorMessage.Add(1615, "Bad query syntax");
				s_ErrorMessage.Add(1616, "Invalid field");
				s_ErrorMessage.Add(1617, "Device removed");
				s_ErrorMessage.Add(1618, "Install already running");
				s_ErrorMessage.Add(1619, "Install package open failed");
				s_ErrorMessage.Add(1620, "Install package invalid");
				s_ErrorMessage.Add(1621, "Install UI failure");
				s_ErrorMessage.Add(1622, "Install log failure");
				s_ErrorMessage.Add(1623, "Install language unsupported");
				s_ErrorMessage.Add(1624, "Install transform failure");
				s_ErrorMessage.Add(1625, "Install package rejected");
				s_ErrorMessage.Add(1626, "Function not called");
				s_ErrorMessage.Add(1627, "Function failed");
				s_ErrorMessage.Add(1628, "Invalid table");
				s_ErrorMessage.Add(1629, "Datatype mismatch");
				s_ErrorMessage.Add(1630, "Unsupported type");
				s_ErrorMessage.Add(1631, "Create failed");
				s_ErrorMessage.Add(1632, "Install temp unwritable");
				s_ErrorMessage.Add(1633, "Install platform unsupported");
				s_ErrorMessage.Add(1634, "Install notused");
				s_ErrorMessage.Add(1635, "Patch package open failed");
				s_ErrorMessage.Add(1636, "Patch package invalid");
				s_ErrorMessage.Add(1637, "Patch package unsupported");
				s_ErrorMessage.Add(1638, "Product version");
				s_ErrorMessage.Add(1639, "Invalid command line");
				s_ErrorMessage.Add(1640, "Install remote disallowed");
				s_ErrorMessage.Add(1641, "Success reboot initiated");
				s_ErrorMessage.Add(1642, "Patch target not found");
				s_ErrorMessage.Add(1643, "Patch package rejected");
				s_ErrorMessage.Add(1644, "Install transform rejected");
				s_ErrorMessage.Add(1700, "RPC S Invalid string binding");
				s_ErrorMessage.Add(1701, "RPC S Wrong kind of binding");
				s_ErrorMessage.Add(1702, "RPC S Invalid binding");
				s_ErrorMessage.Add(1703, "RPC S Protseq not supported");
				s_ErrorMessage.Add(1704, "RPC S Invalid RPC protseq");
				s_ErrorMessage.Add(1705, "RPC S Invalid string UUID");
				s_ErrorMessage.Add(1706, "RPC S Invalid endpoint format");
				s_ErrorMessage.Add(1707, "RPC S Invalid net addr");
				s_ErrorMessage.Add(1708, "RPC S No endpoint found");
				s_ErrorMessage.Add(1709, "RPC S Invalid timeout");
				s_ErrorMessage.Add(1710, "RPC S Object not found");
				s_ErrorMessage.Add(1711, "RPC S Already registered");
				s_ErrorMessage.Add(1712, "RPC S Type already registered");
				s_ErrorMessage.Add(1713, "RPC S Already listening");
				s_ErrorMessage.Add(1714, "RPC S Not protseqs registered");
				s_ErrorMessage.Add(1715, "RPC S Not listening");
				s_ErrorMessage.Add(1716, "RPC S Unknown mgr type");
				s_ErrorMessage.Add(1717, "RPC S Unknown IF");
				s_ErrorMessage.Add(1718, "RPC S No bindings");
				s_ErrorMessage.Add(1719, "RPC S Not protseqs");
				s_ErrorMessage.Add(1720, "RPC S Can't create endpoint");
				s_ErrorMessage.Add(1721, "RPC S Out of resources");
				s_ErrorMessage.Add(1722, "RPC S Server unavailable");
				s_ErrorMessage.Add(1723, "RPC S Server too busy");
				s_ErrorMessage.Add(1724, "RPC S Invalid network options");
				s_ErrorMessage.Add(1725, "RPC S No call active");
				s_ErrorMessage.Add(1726, "RPC S Call failed");
				s_ErrorMessage.Add(1727, "RPC S Call failed DNE");
				s_ErrorMessage.Add(1728, "RPC S Protocol error");
				s_ErrorMessage.Add(1730, "RPC S Unsupported trans syn");
				s_ErrorMessage.Add(1732, "RPC S Unsupported type");
				s_ErrorMessage.Add(1733, "RPC S Invalid tag");
				s_ErrorMessage.Add(1734, "RPC S Invalid bound");
				s_ErrorMessage.Add(1735, "RPC S No entry name");
				s_ErrorMessage.Add(1736, "RPC S Invalid name syntax");
				s_ErrorMessage.Add(1737, "RPC S Unsupported name syntax");
				s_ErrorMessage.Add(1739, "RPC S UUID no address");
				s_ErrorMessage.Add(1740, "RPC S Duplicate endpoint");
				s_ErrorMessage.Add(1741, "RPC S Unknown authn type");
				s_ErrorMessage.Add(1742, "RPC S Max calls too small");
				s_ErrorMessage.Add(1743, "RPC S String too long");
				s_ErrorMessage.Add(1744, "RPC S Protseq not found");
				s_ErrorMessage.Add(1745, "RPC S Procnum out of range");
				s_ErrorMessage.Add(1746, "RPC S Binding has no auth");
				s_ErrorMessage.Add(1747, "RPC S Unknown authn service");
				s_ErrorMessage.Add(1748, "RPC S Unknown authn level");
				s_ErrorMessage.Add(1749, "RPC S Invalid auth identity");
				s_ErrorMessage.Add(1750, "RPC S Unknown authz service");
				s_ErrorMessage.Add(1751, "EPT S Invalid entry");
				s_ErrorMessage.Add(1752, "EPT S Can't perform op");
				s_ErrorMessage.Add(1753, "EPT S Not registered");
				s_ErrorMessage.Add(1754, "RPC S Nothing to export");
				s_ErrorMessage.Add(1755, "RPC S Incomplete name");
				s_ErrorMessage.Add(1756, "RPC S Invalid vers option");
				s_ErrorMessage.Add(1757, "RPC S No more members");
				s_ErrorMessage.Add(1758, "RPC S Not all objs unexported");
				s_ErrorMessage.Add(1759, "RPC S Interface not found");
				s_ErrorMessage.Add(1760, "RPC S Entry already exists");
				s_ErrorMessage.Add(1761, "RPC S Entry not found");
				s_ErrorMessage.Add(1762, "RPC S Name service unavailable");
				s_ErrorMessage.Add(1763, "RPC S Invalid naf ID");
				s_ErrorMessage.Add(1764, "RPC S Cannot support");
				s_ErrorMessage.Add(1765, "RPC S No context available");
				s_ErrorMessage.Add(1766, "RPC S Internal error");
				s_ErrorMessage.Add(1767, "RPC S Zero divide");
				s_ErrorMessage.Add(1768, "RPC S Address error");
				s_ErrorMessage.Add(1769, "RPC S FP div zero");
				s_ErrorMessage.Add(1770, "RPC S FP Underflow");
				s_ErrorMessage.Add(1771, "RPC S Overflow");
				s_ErrorMessage.Add(1772, "RPC X No more entries");
				s_ErrorMessage.Add(1773, "RPC X SS char trans open fail");
				s_ErrorMessage.Add(1774, "RPC X SS char trans short file");
				s_ErrorMessage.Add(1775, "RPC S SS in null context");
				s_ErrorMessage.Add(1777, "RPC X SS context damaged");
				s_ErrorMessage.Add(1778, "RPC X SS handles mismatch");
				s_ErrorMessage.Add(1779, "RPC X SS cannot get call handle");
				s_ErrorMessage.Add(1780, "RPC X Null ref pointer");
				s_ErrorMessage.Add(1781, "RPC X enum value out of range");
				s_ErrorMessage.Add(1782, "RPC X byte count too small");
				s_ErrorMessage.Add(1783, "RPC X bad stub data");
				s_ErrorMessage.Add(1784, "Invalid user buffer");
				s_ErrorMessage.Add(1785, "Unrecognised media");
				s_ErrorMessage.Add(1786, "No trust lsa secret");
				s_ErrorMessage.Add(1787, "No trust sam account");
				s_ErrorMessage.Add(1788, "Trusted domain failure");
				s_ErrorMessage.Add(1789, "Trusted relationship failure");
				s_ErrorMessage.Add(1790, "Trust failure");
				s_ErrorMessage.Add(1791, "RPC S call in progress");
				s_ErrorMessage.Add(1792, "Error netlogon not started");
				s_ErrorMessage.Add(1793, "Account expired");
				s_ErrorMessage.Add(1794, "Redirector has open handles");
				s_ErrorMessage.Add(1795, "Printer driver already installed");
				s_ErrorMessage.Add(1796, "Unknown port");
				s_ErrorMessage.Add(1797, "Unknown printer driver");
				s_ErrorMessage.Add(1798, "Unknown printprocessor");
				s_ErrorMessage.Add(1799, "Invalid separator file");
				s_ErrorMessage.Add(1800, "Invalid priority");
				s_ErrorMessage.Add(1801, "Invalid printer name");
				s_ErrorMessage.Add(1802, "Printer already exists");
				s_ErrorMessage.Add(1803, "Invalid printer command");
				s_ErrorMessage.Add(1804, "Invalid datatype");
				s_ErrorMessage.Add(1805, "Invalid environment");
				s_ErrorMessage.Add(1806, "RPC S no more bindings");
				s_ErrorMessage.Add(1807, "Nologon interdomain trust account");
				s_ErrorMessage.Add(1808, "Nologon workstation trust account");
				s_ErrorMessage.Add(1809, "Nologon server trust account");
				s_ErrorMessage.Add(1810, "Domain trust inconsistent");
				s_ErrorMessage.Add(1811, "Server has open handles");
				s_ErrorMessage.Add(1812, "Resource data not found");
				s_ErrorMessage.Add(1813, "Resource type not found");
				s_ErrorMessage.Add(1814, "Resource name not found");
				s_ErrorMessage.Add(1815, "Resource lang not found");
				s_ErrorMessage.Add(1816, "Not enough quota");
				s_ErrorMessage.Add(1817, "RPC S no interfaces");
				s_ErrorMessage.Add(1818, "RPC S Call cancelled");
				s_ErrorMessage.Add(1819, "RPC S Binding incomplete");
				s_ErrorMessage.Add(1820, "RPC S Comm failure");
				s_ErrorMessage.Add(1821, "RPC S Unsupported authn level");
				s_ErrorMessage.Add(1822, "RPC S No princ name");
				s_ErrorMessage.Add(1823, "RPC S Not RPC error");
				s_ErrorMessage.Add(1824, "RPC U UUID local only");
				s_ErrorMessage.Add(1825, "RPC S Sec pkg error");
				s_ErrorMessage.Add(1826, "RPC S Not cancelled");
				s_ErrorMessage.Add(1827, "RPC X Invalid ES action");
				s_ErrorMessage.Add(1828, "RPC X Wrong ES version");
				s_ErrorMessage.Add(1829, "RPC X Wrong stub version");
				s_ErrorMessage.Add(1830, "RPC X Invalid pipe object");
				s_ErrorMessage.Add(1831, "RPC X Wrong pipe order");
				s_ErrorMessage.Add(1832, "RPC X Wrong pipe version");
				s_ErrorMessage.Add(1898, "RPC S group member not found");
				s_ErrorMessage.Add(1899, "EPT S Can't create");
				s_ErrorMessage.Add(1900, "RPC S Invalid object");
				s_ErrorMessage.Add(1901, "Invalid time");
				s_ErrorMessage.Add(1902, "Invalid form name");
				s_ErrorMessage.Add(1903, "Invalid form size");
				s_ErrorMessage.Add(1904, "Already waiting");
				s_ErrorMessage.Add(1905, "Printer deleted");
				s_ErrorMessage.Add(1906, "Invalid printer state");
				s_ErrorMessage.Add(1907, "Password must change");
				s_ErrorMessage.Add(1908, "Domain controller not found");
				s_ErrorMessage.Add(1909, "Account locked out");
				s_ErrorMessage.Add(1910, "OR Invalid OXID");
				s_ErrorMessage.Add(1911, "OR Invalid OID");
				s_ErrorMessage.Add(1912, "OR Invalid set");
				s_ErrorMessage.Add(1913, "RPC S Send incomplete");
				s_ErrorMessage.Add(1914, "RPC S Invalid async handle");
				s_ErrorMessage.Add(1915, "RPC S Invalid async call");
				s_ErrorMessage.Add(1916, "RPC X Pipe closed");
				s_ErrorMessage.Add(1917, "RPC X Pipe discipline error");
				s_ErrorMessage.Add(1918, "RPC X Pipe empty");
				s_ErrorMessage.Add(1919, "No sitename");
				s_ErrorMessage.Add(1920, "Can't access file");
				s_ErrorMessage.Add(1921, "Can't resolve filename");
				s_ErrorMessage.Add(1922, "RPC S Entry type mismatch");
				s_ErrorMessage.Add(1923, "RPC S Not all objs exported");
				s_ErrorMessage.Add(1924, "RPC S Interface not exported");
				s_ErrorMessage.Add(1925, "RPC S Profile not added");
				s_ErrorMessage.Add(1926, "RPC S PRF ELT not added");
				s_ErrorMessage.Add(1927, "RPC S PRF ELT not removed");
				s_ErrorMessage.Add(1928, "RPC S GRP ELT not added");
				s_ErrorMessage.Add(1929, "RPC S GRP ELT not removed");
				s_ErrorMessage.Add(1930, "KM driver blocked");
				s_ErrorMessage.Add(1931, "Context expired");
				s_ErrorMessage.Add(2000, "Invalid pixel format");
				s_ErrorMessage.Add(2001, "Bad driver");
				s_ErrorMessage.Add(2002, "Invalid window style");
				s_ErrorMessage.Add(2003, "Metafile not supported");
				s_ErrorMessage.Add(2004, "Transform not supported");
				s_ErrorMessage.Add(2005, "Clipping not supported");
				s_ErrorMessage.Add(2010, "Invalid CMM");
				s_ErrorMessage.Add(2011, "Invalid profile");
				s_ErrorMessage.Add(2012, "Tag not found");
				s_ErrorMessage.Add(2013, "Tag not present");
				s_ErrorMessage.Add(2014, "Duplicate tag");
				s_ErrorMessage.Add(2015, "Profile not associated with device");
				s_ErrorMessage.Add(2016, "Profile not found");
				s_ErrorMessage.Add(2017, "Invalid colorspace");
				s_ErrorMessage.Add(2018, "ICM not enabled");
				s_ErrorMessage.Add(2019, "Deleting ICM xform");
				s_ErrorMessage.Add(2020, "Invalid transform");
				s_ErrorMessage.Add(2021, "Colorspace mismatch");
				s_ErrorMessage.Add(2022, "Invalid colorindex");
				s_ErrorMessage.Add(2108, "Connected other password");
				s_ErrorMessage.Add(2109, "Connected other password default");
				s_ErrorMessage.Add(2202, "Bad username");
				s_ErrorMessage.Add(2250, "Not connected");
				s_ErrorMessage.Add(2401, "Open files");
				s_ErrorMessage.Add(2402, "Active connections");
				s_ErrorMessage.Add(2404, "Device in use");
				s_ErrorMessage.Add(3000, "Unknown print monitor");
				s_ErrorMessage.Add(3001, "Printer driver in use");
				s_ErrorMessage.Add(3002, "Spool file not found");
				s_ErrorMessage.Add(3003, "SPL no startdoc");
				s_ErrorMessage.Add(3004, "SPL no addjob");
				s_ErrorMessage.Add(3005, "Print processor already installed");
				s_ErrorMessage.Add(3006, "Print monitor already installed");
				s_ErrorMessage.Add(3007, "Invalid print monitor");
				s_ErrorMessage.Add(3008, "Print monitor in use");
				s_ErrorMessage.Add(3009, "Printer has jobs queued");
				s_ErrorMessage.Add(3010, "Success reboot required");
				s_ErrorMessage.Add(3011, "Success restart required");
				s_ErrorMessage.Add(3012, "Printer not found");
				s_ErrorMessage.Add(3013, "Printer driver warned");
				s_ErrorMessage.Add(3014, "Printer driver blocked");
				s_ErrorMessage.Add(4000, "Wins internal");
				s_ErrorMessage.Add(4001, "Can not del local wins");
				s_ErrorMessage.Add(4002, "Static init");
				s_ErrorMessage.Add(4003, "Inc backup");
				s_ErrorMessage.Add(4004, "Full backup");
				s_ErrorMessage.Add(4005, "Rec not existent");
				s_ErrorMessage.Add(4006, "RPL not allowed");
				s_ErrorMessage.Add(4100, "DHCP address conflict");
				s_ErrorMessage.Add(4200, "WMU GUID not found");
				s_ErrorMessage.Add(4201, "WMI instance not found");
				s_ErrorMessage.Add(4202, "WMI ItemID not found");
				s_ErrorMessage.Add(4203, "WMI try again");
				s_ErrorMessage.Add(4204, "WMI DP not found");
				s_ErrorMessage.Add(4205, "WMI unresolved instance ref");
				s_ErrorMessage.Add(4206, "WMU already enabled");
				s_ErrorMessage.Add(4207, "WMU GUID disconnected");
				s_ErrorMessage.Add(4208, "WMI server unavailable");
				s_ErrorMessage.Add(4209, "WMI DP failed");
				s_ErrorMessage.Add(4210, "WMI invalid MOF");
				s_ErrorMessage.Add(4211, "WMI invalid reginfo");
				s_ErrorMessage.Add(4212, "WMI already disabled");
				s_ErrorMessage.Add(4213, "WMI read only");
				s_ErrorMessage.Add(4214, "WMI set failure");
				s_ErrorMessage.Add(4300, "Invalid media");
				s_ErrorMessage.Add(4301, "Invalid library");
				s_ErrorMessage.Add(4302, "Invalid media pool");
				s_ErrorMessage.Add(4303, "Drive media mismatch");
				s_ErrorMessage.Add(4304, "Media offline");
				s_ErrorMessage.Add(4305, "Library offline");
				s_ErrorMessage.Add(4306, "Empty");
				s_ErrorMessage.Add(4307, "Not empty");
				s_ErrorMessage.Add(4308, "Media unavailable");
				s_ErrorMessage.Add(4309, "Resource disabled");
				s_ErrorMessage.Add(4310, "Invalid cleaner");
				s_ErrorMessage.Add(4311, "Unable to clean");
				s_ErrorMessage.Add(4312, "Object not found");
				s_ErrorMessage.Add(4313, "Database failure");
				s_ErrorMessage.Add(4314, "Database full");
				s_ErrorMessage.Add(4315, "Media incompatible");
				s_ErrorMessage.Add(4316, "Resource not present");
				s_ErrorMessage.Add(4317, "Invalid operation");
				s_ErrorMessage.Add(4318, "Media not available");
				s_ErrorMessage.Add(4319, "Device not available");
				s_ErrorMessage.Add(4320, "Request refused");
				s_ErrorMessage.Add(4321, "Invalid drive object");
				s_ErrorMessage.Add(4322, "Library full");
				s_ErrorMessage.Add(4323, "Medium not accessible");
				s_ErrorMessage.Add(4324, "Unable to load medium");
				s_ErrorMessage.Add(4325, "Unable to inventory drive");
				s_ErrorMessage.Add(4326, "Unable to inventory slot");
				s_ErrorMessage.Add(4327, "Unable to inventory transport");
				s_ErrorMessage.Add(4328, "Transport full");
				s_ErrorMessage.Add(4329, "Controlling ieport");
				s_ErrorMessage.Add(4330, "Unable to eject mounted media");
				s_ErrorMessage.Add(4331, "Cleaner slot set");
				s_ErrorMessage.Add(4332, "Cleaner slot not set");
				s_ErrorMessage.Add(4333, "Cleaner cartridge spent");
				s_ErrorMessage.Add(4334, "Unexpected omid");
				s_ErrorMessage.Add(4335, "Can't delete last item");
				s_ErrorMessage.Add(4336, "Message exceeds max size");
				s_ErrorMessage.Add(4337, "Volume contains sys files");
				s_ErrorMessage.Add(4338, "Indigenous type");
				s_ErrorMessage.Add(4339, "No supporting drives");
				s_ErrorMessage.Add(4340, "Cleaner cartridge installed");
				s_ErrorMessage.Add(4350, "Fill offline");
				s_ErrorMessage.Add(4351, "Remote storage not active");
				s_ErrorMessage.Add(4352, "Remote storage media error");
				s_ErrorMessage.Add(4390, "Not a reparse point");
				s_ErrorMessage.Add(4391, "Reparse attribute conflict");
				s_ErrorMessage.Add(4392, "Invalid reparse data");
				s_ErrorMessage.Add(4393, "Reparse tag invalid");
				s_ErrorMessage.Add(4394, "Reparse tag mismatch");
				s_ErrorMessage.Add(4500, "Volume not sis enabled");
				s_ErrorMessage.Add(5001, "Dependent resource exists");
				s_ErrorMessage.Add(5002, "Dependency not found");
				s_ErrorMessage.Add(5003, "Dependency already exists");
				s_ErrorMessage.Add(5004, "Resource not online");
				s_ErrorMessage.Add(5005, "Host node not available");
				s_ErrorMessage.Add(5006, "Resource not available");
				s_ErrorMessage.Add(5007, "Resource not found");
				s_ErrorMessage.Add(5008, "Shutdown cluster");
				s_ErrorMessage.Add(5009, "Can't evict active node");
				s_ErrorMessage.Add(5010, "Object already exists");
				s_ErrorMessage.Add(5011, "Object in list");
				s_ErrorMessage.Add(5012, "Group not available");
				s_ErrorMessage.Add(5013, "Group not found");
				s_ErrorMessage.Add(5014, "Group not online");
				s_ErrorMessage.Add(5015, "Host node not resource owner");
				s_ErrorMessage.Add(5016, "Host node not group owner");
				s_ErrorMessage.Add(5017, "Resmon create failed");
				s_ErrorMessage.Add(5018, "Resmon online failed");
				s_ErrorMessage.Add(5019, "Resource online");
				s_ErrorMessage.Add(5020, "Quorum resource");
				s_ErrorMessage.Add(5021, "Not quorum capable");
				s_ErrorMessage.Add(5022, "Cluster shutting down");
				s_ErrorMessage.Add(5023, "Invalid state");
				s_ErrorMessage.Add(5024, "Resource properties stored");
				s_ErrorMessage.Add(5025, "Not quorum class");
				s_ErrorMessage.Add(5026, "Core resource");
				s_ErrorMessage.Add(5027, "Quorum resource online failed");
				s_ErrorMessage.Add(5028, "Quorumlog open failed");
				s_ErrorMessage.Add(5029, "Clusterlog corrupt");
				s_ErrorMessage.Add(5030, "Clusterlog record exceeds maxsize");
				s_ErrorMessage.Add(5031, "Clusterlog exceeds maxsize");
				s_ErrorMessage.Add(5032, "Clusterlog chkpoint not found");
				s_ErrorMessage.Add(5033, "Clusterlog not enough space");
				s_ErrorMessage.Add(5034, "Quorum owner alive");
				s_ErrorMessage.Add(5035, "Network not available");
				s_ErrorMessage.Add(5036, "Node not available");
				s_ErrorMessage.Add(5037, "All nodes not available");
				s_ErrorMessage.Add(5038, "Resource failed");
				s_ErrorMessage.Add(5039, "Cluster invalid node");
				s_ErrorMessage.Add(5040, "Cluster node exists");
				s_ErrorMessage.Add(5041, "Cluster join in progress");
				s_ErrorMessage.Add(5042, "Cluster node not found");
				s_ErrorMessage.Add(5043, "Cluster local node not found");
				s_ErrorMessage.Add(5044, "Cluster network exists");
				s_ErrorMessage.Add(5045, "Cluster network not found");
				s_ErrorMessage.Add(5046, "Cluster netinterface exists");
				s_ErrorMessage.Add(5047, "Cluster netinterface not found");
				s_ErrorMessage.Add(5048, "Cluster invalid request");
				s_ErrorMessage.Add(5049, "Cluster invalid network provider");
				s_ErrorMessage.Add(5050, "Cluster node down");
				s_ErrorMessage.Add(5051, "Cluster node unreachable");
				s_ErrorMessage.Add(5052, "Cluster node not member");
				s_ErrorMessage.Add(5053, "Cluster join not in progress");
				s_ErrorMessage.Add(5054, "Cluster invalid network");
				s_ErrorMessage.Add(5056, "Cluster node up");
				s_ErrorMessage.Add(5057, "Cluster ipaddr in use");
				s_ErrorMessage.Add(5058, "Cluster node not paused");
				s_ErrorMessage.Add(5059, "Cluster no security context");
				s_ErrorMessage.Add(5060, "Cluster network not internal");
				s_ErrorMessage.Add(5061, "Cluster node already up");
				s_ErrorMessage.Add(5062, "Cluster node already down");
				s_ErrorMessage.Add(5063, "Cluster network already online");
				s_ErrorMessage.Add(5064, "Cluster network already offline");
				s_ErrorMessage.Add(5065, "Cluster node already member");
				s_ErrorMessage.Add(5066, "Cluster last internal network");
				s_ErrorMessage.Add(5067, "Cluster network has dependents");
				s_ErrorMessage.Add(5068, "Invalid operation on quorum");
				s_ErrorMessage.Add(5069, "Dependency not allowed");
				s_ErrorMessage.Add(5070, "Cluster node paused");
				s_ErrorMessage.Add(5071, "Node can't host resource");
				s_ErrorMessage.Add(5072, "Cluster node not ready");
				s_ErrorMessage.Add(5073, "Cluster node shutting down");
				s_ErrorMessage.Add(5074, "Cluster join aborted");
				s_ErrorMessage.Add(5075, "Cluster incompatible versions");
				s_ErrorMessage.Add(5076, "Cluster maxnum of resources exceeded");
				s_ErrorMessage.Add(5077, "Cluster system config changed");
				s_ErrorMessage.Add(5078, "Cluster resource type not found");
				s_ErrorMessage.Add(5079, "Cluster restype not supported");
				s_ErrorMessage.Add(5080, "Cluster resname not found");
				s_ErrorMessage.Add(5081, "Cluster no RPC packages registered");
				s_ErrorMessage.Add(5082, "Cluster owner not in preflist");
				s_ErrorMessage.Add(5083, "Cluster database seqmismatch");
				s_ErrorMessage.Add(5084, "Resmon invalid state");
				s_ErrorMessage.Add(5085, "Cluster gum not locker");
				s_ErrorMessage.Add(5086, "Quorum disk not found");
				s_ErrorMessage.Add(5087, "Database backup corrupt");
				s_ErrorMessage.Add(5088, "Cluster node already has DFS root");
				s_ErrorMessage.Add(5089, "Resource property unchangeable");
				s_ErrorMessage.Add(5890, "Cluster membership invalid state");
				s_ErrorMessage.Add(5891, "Cluster quorumlog not found");
				s_ErrorMessage.Add(5892, "Cluster membership halt");
				s_ErrorMessage.Add(5893, "Cluster instance ID mismatch");
				s_ErrorMessage.Add(5894, "Cluster network not found for IP");
				s_ErrorMessage.Add(5895, "Cluster property data type mismatch");
				s_ErrorMessage.Add(5896, "Cluster evict without cleanup");
				s_ErrorMessage.Add(5897, "Cluster parameter mismatch");
				s_ErrorMessage.Add(5898, "Node cannot be clustered");
				s_ErrorMessage.Add(5899, "Cluster wrong OS version");
				s_ErrorMessage.Add(5900, "Cluster can't create dup cluster name");
				s_ErrorMessage.Add(6001, "Decryption failed");
				s_ErrorMessage.Add(6002, "File encrypted");
				s_ErrorMessage.Add(6003, "No recovery policy");
				s_ErrorMessage.Add(6004, "No EFS");
				s_ErrorMessage.Add(6005, "Wrong EFS");
				s_ErrorMessage.Add(6006, "No user keys");
				s_ErrorMessage.Add(6007, "File not encryped");
				s_ErrorMessage.Add(6008, "Not export format");
				s_ErrorMessage.Add(6009, "File read only");
				s_ErrorMessage.Add(6010, "Dir EFS disallowed");
				s_ErrorMessage.Add(6011, "EFS server not trusted");
				s_ErrorMessage.Add(6012, "Bad recovery policy");
				s_ErrorMessage.Add(6013, "ETS alg blob too big");
				s_ErrorMessage.Add(6014, "Volume not support EFS");
				s_ErrorMessage.Add(6015, "EFS disabled");
				s_ErrorMessage.Add(6016, "EFS version not support");
				s_ErrorMessage.Add(6118, "No browser servers found");
				s_ErrorMessage.Add(6200, "Sched E service not localsystem");
				s_ErrorMessage.Add(7001, "Ctx winstation name invalid");
				s_ErrorMessage.Add(7002, "Ctx invalid PD");
				s_ErrorMessage.Add(7003, "Ctx PD not found");
				s_ErrorMessage.Add(7004, "Ctx WD not found");
				s_ErrorMessage.Add(7005, "Ctx cannot make eventlog entry");
				s_ErrorMessage.Add(7006, "Ctx service name collision");
				s_ErrorMessage.Add(7007, "Ctx close pending");
				s_ErrorMessage.Add(7008, "Ctx no outbuf");
				s_ErrorMessage.Add(7009, "Ctx modem inf not found");
				s_ErrorMessage.Add(7010, "Ctx invalid modemname");
				s_ErrorMessage.Add(7011, "Ctx modem response error");
				s_ErrorMessage.Add(7012, "Ctx modem response timeout");
				s_ErrorMessage.Add(7013, "Ctx modem response no carrier");
				s_ErrorMessage.Add(7014, "Ctx modem response no dial tone");
				s_ErrorMessage.Add(7015, "Ctx modem response busy");
				s_ErrorMessage.Add(7016, "Ctx modem response voice");
				s_ErrorMessage.Add(7017, "Ctx TD error");
				s_ErrorMessage.Add(7022, "Ctx winstation not found");
				s_ErrorMessage.Add(7023, "Ctx winstation already exists");
				s_ErrorMessage.Add(7024, "Ctx winstation busy");
				s_ErrorMessage.Add(7025, "Ctx bad video mode");
				s_ErrorMessage.Add(7035, "Ctx graphics invalid");
				s_ErrorMessage.Add(7037, "Ctx logon disabled");
				s_ErrorMessage.Add(7038, "Ctx not console");
				s_ErrorMessage.Add(7040, "Ctx client query timeout");
				s_ErrorMessage.Add(7041, "Ctx console disconnect");
				s_ErrorMessage.Add(7042, "Ctx console connect");
				s_ErrorMessage.Add(7044, "Ctx shadow denied");
				s_ErrorMessage.Add(7045, "Ctx winstation access denied");
				s_ErrorMessage.Add(7049, "Ctx invalid WD");
				s_ErrorMessage.Add(7050, "Ctx shadow invalid");
				s_ErrorMessage.Add(7051, "Ctx shadow disabled");
				s_ErrorMessage.Add(7052, "Ctx client licence in use");
				s_ErrorMessage.Add(7053, "Ctx client licence not set");
				s_ErrorMessage.Add(7054, "Ctx licence not available");
				s_ErrorMessage.Add(7055, "Ctx licence client invalid");
				s_ErrorMessage.Add(7056, "Ctx licence expired");
				s_ErrorMessage.Add(7057, "Ctx shadow not running");
				s_ErrorMessage.Add(7058, "Ctx shadow ended by mode change");
				s_ErrorMessage.Add(8001, "FRS err invalid API sequence");
				s_ErrorMessage.Add(8002, "FRS err starting service");
				s_ErrorMessage.Add(8003, "FRS err stopping service");
				s_ErrorMessage.Add(8004, "FRS err internal API");
				s_ErrorMessage.Add(8005, "FRS err internal");
				s_ErrorMessage.Add(8006, "FRS err service comm");
				s_ErrorMessage.Add(8007, "FRS err insufficient priv");
				s_ErrorMessage.Add(8008, "FRS err authentication");
				s_ErrorMessage.Add(8009, "FRS err parent insufficient priv");
				s_ErrorMessage.Add(8010, "FRS err parent authentication");
				s_ErrorMessage.Add(8011, "FRS err child to parent comm");
				s_ErrorMessage.Add(8012, "FRS err parent to child comm");
				s_ErrorMessage.Add(8013, "FRS err sysvol populate");
				s_ErrorMessage.Add(8014, "FRS err sysvol populate timeout");
				s_ErrorMessage.Add(8015, "FRS err sysvol is busy");
				s_ErrorMessage.Add(8016, "FRS err sysvol demote");
				s_ErrorMessage.Add(8017, "FRS err invalid service parameter");
				s_ErrorMessage.Add(8200, "DS not installed");
				s_ErrorMessage.Add(8201, "DS membership evaluated locally");
				s_ErrorMessage.Add(8202, "DS no attribute or value");
				s_ErrorMessage.Add(8203, "DS invalid attribute syntax");
				s_ErrorMessage.Add(8204, "DS attribute type undefined");
				s_ErrorMessage.Add(8205, "DS attribute or value exists");
				s_ErrorMessage.Add(8206, "DS busy");
				s_ErrorMessage.Add(8207, "DS unavailable");
				s_ErrorMessage.Add(8208, "DS no rids allocated");
				s_ErrorMessage.Add(8209, "DS no more rids");
				s_ErrorMessage.Add(8210, "DS incorrect role owner");
				s_ErrorMessage.Add(8211, "DS ridmgr init error");
				s_ErrorMessage.Add(8212, "DS obj class violation");
				s_ErrorMessage.Add(8213, "DS can't on non leaf");
				s_ErrorMessage.Add(8214, "DS can't on rnd");
				s_ErrorMessage.Add(8215, "DS can't mod obj class");
				s_ErrorMessage.Add(8216, "DS cross dom move error");
				s_ErrorMessage.Add(8217, "DS GC not available");
				s_ErrorMessage.Add(8218, "Shared policy");
				s_ErrorMessage.Add(8219, "Policy object not found");
				s_ErrorMessage.Add(8220, "Policy only in DS");
				s_ErrorMessage.Add(8221, "Promotion active");
				s_ErrorMessage.Add(8222, "No promotion active");
				s_ErrorMessage.Add(8224, "DS operations error");
				s_ErrorMessage.Add(8225, "DS protocol error");
				s_ErrorMessage.Add(8226, "DS timelimit exceeded");
				s_ErrorMessage.Add(8227, "DS sizelimit exceeded");
				s_ErrorMessage.Add(8228, "DS admin limit exceeded");
				s_ErrorMessage.Add(8229, "DS compare false");
				s_ErrorMessage.Add(8230, "DS compare true");
				s_ErrorMessage.Add(8231, "DS auth method not supported");
				s_ErrorMessage.Add(8232, "DS strong auth required");
				s_ErrorMessage.Add(8233, "DS inappropriate auth");
				s_ErrorMessage.Add(8234, "DS auth unknown");
				s_ErrorMessage.Add(8235, "DS referral");
				s_ErrorMessage.Add(8236, "DS unavailable crit extension");
				s_ErrorMessage.Add(8237, "DS confidentiality required");
				s_ErrorMessage.Add(8238, "DS inappropriate matching");
				s_ErrorMessage.Add(8239, "DS constraint violation");
				s_ErrorMessage.Add(8240, "DS no such object");
				s_ErrorMessage.Add(8241, "DS alias problem");
				s_ErrorMessage.Add(8242, "DS invalid dn syntax");
				s_ErrorMessage.Add(8243, "DS is leaf");
				s_ErrorMessage.Add(8244, "DS alias deref problem");
				s_ErrorMessage.Add(8245, "DS unwilling to perform");
				s_ErrorMessage.Add(8246, "DS loop detect");
				s_ErrorMessage.Add(8247, "DS naming violation");
				s_ErrorMessage.Add(8248, "DS object results too large");
				s_ErrorMessage.Add(8249, "DS affects multiple dsas");
				s_ErrorMessage.Add(8250, "DS server down");
				s_ErrorMessage.Add(8251, "DS local error");
				s_ErrorMessage.Add(8252, "DS encoding error");
				s_ErrorMessage.Add(8253, "DS decoding error");
				s_ErrorMessage.Add(8254, "DS filter unknown");
				s_ErrorMessage.Add(8255, "DS param error");
				s_ErrorMessage.Add(8256, "DS not supported");
				s_ErrorMessage.Add(8257, "DS no results returned");
				s_ErrorMessage.Add(8258, "DS control not found");
				s_ErrorMessage.Add(8259, "DS client loop");
				s_ErrorMessage.Add(8260, "DS referral limit exceeded");
				s_ErrorMessage.Add(8261, "DS sort control missing");
				s_ErrorMessage.Add(8262, "DS offset range error");
				s_ErrorMessage.Add(8301, "DS root must be nc");
				s_ErrorMessage.Add(8302, "DS and replica inhibited");
				s_ErrorMessage.Add(8303, "DS att not def in schema");
				s_ErrorMessage.Add(8304, "DS max obj size exceeded");
				s_ErrorMessage.Add(8305, "DS obj string name exists");
				s_ErrorMessage.Add(8306, "DS no rdn defined in schema");
				s_ErrorMessage.Add(8307, "DS rdn doesn't match schema");
				s_ErrorMessage.Add(8308, "DS no requested atts found");
				s_ErrorMessage.Add(8309, "DS user buffer too small");
				s_ErrorMessage.Add(8310, "DS att is not on obj");
				s_ErrorMessage.Add(8311, "DS illegal mod operation");
				s_ErrorMessage.Add(8312, "DS obj too large");
				s_ErrorMessage.Add(8313, "DS bad instance type");
				s_ErrorMessage.Add(8314, "DS masterdsa required");
				s_ErrorMessage.Add(8315, "DS object class required");
				s_ErrorMessage.Add(8316, "DS missing required att");
				s_ErrorMessage.Add(8317, "DS att not def for class");
				s_ErrorMessage.Add(8318, "DS att already exists");
				s_ErrorMessage.Add(8320, "DS can't add att values");
				s_ErrorMessage.Add(8321, "DS single value constraint");
				s_ErrorMessage.Add(8322, "DS range constraint");
				s_ErrorMessage.Add(8323, "DS att val already exists");
				s_ErrorMessage.Add(8324, "DS can't rem missing att");
				s_ErrorMessage.Add(8325, "DS can't rem missing att val");
				s_ErrorMessage.Add(8326, "DS root can't be subref");
				s_ErrorMessage.Add(8327, "DS no chaining");
				s_ErrorMessage.Add(8328, "DS no chained eval");
				s_ErrorMessage.Add(8329, "DS no parent object");
				s_ErrorMessage.Add(8330, "DS parent is an alias");
				s_ErrorMessage.Add(8331, "DS can't mix master and reps");
				s_ErrorMessage.Add(8332, "DS children exist");
				s_ErrorMessage.Add(8333, "DS obj not found");
				s_ErrorMessage.Add(8334, "DS aliased obj missing");
				s_ErrorMessage.Add(8335, "DS bad name syntax");
				s_ErrorMessage.Add(8336, "DS alias points to alias");
				s_ErrorMessage.Add(8337, "DS can't redef alias");
				s_ErrorMessage.Add(8338, "DS out of scope");
				s_ErrorMessage.Add(8339, "DS object being removed");
				s_ErrorMessage.Add(8340, "DS can't delete dsa obj");
				s_ErrorMessage.Add(8341, "DS generic error");
				s_ErrorMessage.Add(8342, "DS dsa must be int master");
				s_ErrorMessage.Add(8343, "DS class not dsa");
				s_ErrorMessage.Add(8344, "DS insuff access rights");
				s_ErrorMessage.Add(8345, "DS illegal superior");
				s_ErrorMessage.Add(8346, "DS attribute owned by sam");
				s_ErrorMessage.Add(8347, "DS name too many parts");
				s_ErrorMessage.Add(8348, "DS name too long");
				s_ErrorMessage.Add(8349, "DS name value too long");
				s_ErrorMessage.Add(8350, "DS name unparseable");
				s_ErrorMessage.Add(8351, "DS name type unknown");
				s_ErrorMessage.Add(8352, "DS not an object");
				s_ErrorMessage.Add(8353, "DS sec desc too short");
				s_ErrorMessage.Add(8354, "DS sec desc invalid");
				s_ErrorMessage.Add(8355, "DS no deleted name");
				s_ErrorMessage.Add(8356, "DS subref must have parent");
				s_ErrorMessage.Add(8357, "DS ncname must be nc");
				s_ErrorMessage.Add(8358, "DS can't add system only");
				s_ErrorMessage.Add(8359, "DS class must be concrete");
				s_ErrorMessage.Add(8360, "DS invalid dmd");
				s_ErrorMessage.Add(8361, "DS obj GUID exists");
				s_ErrorMessage.Add(8362, "DS not on backlink");
				s_ErrorMessage.Add(8363, "DS no crossref for nc");
				s_ErrorMessage.Add(8364, "DS shutting down");
				s_ErrorMessage.Add(8365, "DS unknown operation");
				s_ErrorMessage.Add(8366, "DS invalid role owner");
				s_ErrorMessage.Add(8367, "DS couldn't contact fsmo");
				s_ErrorMessage.Add(8368, "DS cross nc dn rename");
				s_ErrorMessage.Add(8369, "DS can't mod system only");
				s_ErrorMessage.Add(8370, "DS replicator only");
				s_ErrorMessage.Add(8371, "DS obj class not defined");
				s_ErrorMessage.Add(8372, "DS obj class not subclass");
				s_ErrorMessage.Add(8373, "DS name reference invalid");
				s_ErrorMessage.Add(8374, "DS cross ref exists");
				s_ErrorMessage.Add(8375, "DS can't del master crossref");
				s_ErrorMessage.Add(8376, "DS subtree notify not nc head");
				s_ErrorMessage.Add(8377, "DS notify filter too complex");
				s_ErrorMessage.Add(8378, "DS dup rdn");
				s_ErrorMessage.Add(8379, "DS dup oid");
				s_ErrorMessage.Add(8380, "DS dup mapi ID");
				s_ErrorMessage.Add(8381, "DS dup schema ID GUID");
				s_ErrorMessage.Add(8382, "DS dup LDAP display name");
				s_ErrorMessage.Add(8383, "DS semantic att test");
				s_ErrorMessage.Add(8384, "DS syntax mismatch");
				s_ErrorMessage.Add(8385, "DS exists in must have");
				s_ErrorMessage.Add(8386, "DS exists in may have");
				s_ErrorMessage.Add(8387, "DS nonexistent may have");
				s_ErrorMessage.Add(8388, "DS nonexistent must have");
				s_ErrorMessage.Add(8389, "DS aux cls test fail");
				s_ErrorMessage.Add(8390, "DS nonexistent poss sup");
				s_ErrorMessage.Add(8391, "DS sub cls test fail");
				s_ErrorMessage.Add(8392, "DS bad rdn att ID syntax");
				s_ErrorMessage.Add(8393, "DS exists in aux cls");
				s_ErrorMessage.Add(8394, "DS exists in sub cls");
				s_ErrorMessage.Add(8395, "DS exists in poss sup");
				s_ErrorMessage.Add(8396, "DS recalcschema failed");
				s_ErrorMessage.Add(8397, "DS tree delete not finished");
				s_ErrorMessage.Add(8398, "DS can't delete");
				s_ErrorMessage.Add(8399, "DS att schema req ID");
				s_ErrorMessage.Add(8400, "DS bad att schema syntax");
				s_ErrorMessage.Add(8401, "DS can't cache att");
				s_ErrorMessage.Add(8402, "DS can't cache class");
				s_ErrorMessage.Add(8403, "DS can't remove att cache");
				s_ErrorMessage.Add(8404, "DS can't remove class cache");
				s_ErrorMessage.Add(8405, "DS can't retrieve DN");
				s_ErrorMessage.Add(8406, "DS missing supref");
				s_ErrorMessage.Add(8407, "DS can't retrieve instance");
				s_ErrorMessage.Add(8408, "DS code inconsistency");
				s_ErrorMessage.Add(8409, "DS database error");
				s_ErrorMessage.Add(8410, "DS governsid missing");
				s_ErrorMessage.Add(8411, "DS missing expected att");
				s_ErrorMessage.Add(8412, "DS ncname missing cr ref");
				s_ErrorMessage.Add(8413, "DS security checking error");
				s_ErrorMessage.Add(8414, "DS schema not loaded");
				s_ErrorMessage.Add(8415, "DS schema alloc failed");
				s_ErrorMessage.Add(8416, "DS att schema req syntax");
				s_ErrorMessage.Add(8417, "DS gcverify error");
				s_ErrorMessage.Add(8418, "DS dra schema mismatch");
				s_ErrorMessage.Add(8419, "DS can't find dsa obj");
				s_ErrorMessage.Add(8420, "DS can't find expected nc");
				s_ErrorMessage.Add(8421, "DS can't find nc in cache");
				s_ErrorMessage.Add(8422, "DS can't retrieve child");
				s_ErrorMessage.Add(8423, "DS security illegal modify");
				s_ErrorMessage.Add(8424, "DS can't replace hidden rec");
				s_ErrorMessage.Add(8425, "DS bad hierarchy file");
				s_ErrorMessage.Add(8426, "DS build hierarchy table failed");
				s_ErrorMessage.Add(8427, "DS config param missing");
				s_ErrorMessage.Add(8428, "DS counting ab indices failed");
				s_ErrorMessage.Add(8429, "DS hierarchy table malloc failed");
				s_ErrorMessage.Add(8430, "DS internal failure");
				s_ErrorMessage.Add(8431, "DS unknown error");
				s_ErrorMessage.Add(8432, "DS root requires class top");
				s_ErrorMessage.Add(8433, "DS refusing fmso roles");
				s_ErrorMessage.Add(8434, "DS missing fmso settings");
				s_ErrorMessage.Add(8435, "DS unable to surrender roles");
				s_ErrorMessage.Add(8436, "DS dra generic");
				s_ErrorMessage.Add(8437, "DS dra invalid parameter");
				s_ErrorMessage.Add(8438, "DS dra busy");
				s_ErrorMessage.Add(8439, "DS dra bad dn");
				s_ErrorMessage.Add(8440, "DS dra bad nc");
				s_ErrorMessage.Add(8441, "DS dra dn exists");
				s_ErrorMessage.Add(8442, "DS dra internal error");
				s_ErrorMessage.Add(8443, "DS dra inconsistent dit");
				s_ErrorMessage.Add(8444, "DS dra connection failed");
				s_ErrorMessage.Add(8445, "DS dra bad instance type");
				s_ErrorMessage.Add(8446, "DS dra out of mem");
				s_ErrorMessage.Add(8447, "DS dra mail problem");
				s_ErrorMessage.Add(8448, "DS dra ref already exists");
				s_ErrorMessage.Add(8449, "DS dra ref not found");
				s_ErrorMessage.Add(8450, "DS dra obj is rep source");
				s_ErrorMessage.Add(8451, "DS dra db error");
				s_ErrorMessage.Add(8452, "DS dra no replica");
				s_ErrorMessage.Add(8453, "DS dra access denied");
				s_ErrorMessage.Add(8454, "DS dra not supported");
				s_ErrorMessage.Add(8455, "DS dra RPC cancelled");
				s_ErrorMessage.Add(8456, "DS dra source disabled");
				s_ErrorMessage.Add(8457, "DS dra sink disabled");
				s_ErrorMessage.Add(8458, "DS dra name collision");
				s_ErrorMessage.Add(8459, "DS dra source reinstalled");
				s_ErrorMessage.Add(8460, "DS dra missing parent");
				s_ErrorMessage.Add(8461, "DS dra preempted");
				s_ErrorMessage.Add(8462, "DS dra abandon sync");
				s_ErrorMessage.Add(8463, "DS dra shutdown");
				s_ErrorMessage.Add(8464, "DS dra incompatible partial set");
				s_ErrorMessage.Add(8465, "DS dra source is partial replica");
				s_ErrorMessage.Add(8466, "DS dra extn connection failed");
				s_ErrorMessage.Add(8467, "DS install schema mismatch");
				s_ErrorMessage.Add(8468, "DS dup link ID");
				s_ErrorMessage.Add(8469, "DS name error resolving");
				s_ErrorMessage.Add(8470, "DS name error not found");
				s_ErrorMessage.Add(8471, "DS name error not unique");
				s_ErrorMessage.Add(8472, "DS name error no mapping");
				s_ErrorMessage.Add(8473, "DS name error domain only");
				s_ErrorMessage.Add(8474, "DS name error no syntactical mapping");
				s_ErrorMessage.Add(8475, "DS constructed att mod");
				s_ErrorMessage.Add(8476, "DS wrong om obj class");
				s_ErrorMessage.Add(8477, "DS dra repl pending");
				s_ErrorMessage.Add(8478, "DS ds required");
				s_ErrorMessage.Add(8479, "DS invalid LDAP display name");
				s_ErrorMessage.Add(8480, "DS non base search");
				s_ErrorMessage.Add(8481, "DS can't retrieve atts");
				s_ErrorMessage.Add(8482, "DS backlink without link");
				s_ErrorMessage.Add(8483, "DS epoch mismatch");
				s_ErrorMessage.Add(8484, "DS src name mismatch");
				s_ErrorMessage.Add(8485, "DS src and dst nc identical");
				s_ErrorMessage.Add(8486, "DS dst nc mismatch");
				s_ErrorMessage.Add(8487, "DS not authoritive for dst nc");
				s_ErrorMessage.Add(8488, "DS src GUID mismatch");
				s_ErrorMessage.Add(8489, "DS can't move deleted object");
				s_ErrorMessage.Add(8490, "DS pdc operation in progress");
				s_ErrorMessage.Add(8491, "DS cross domain cleanup reqd");
				s_ErrorMessage.Add(8492, "DS illegal xdom move operation");
				s_ErrorMessage.Add(8493, "DS can't with acct group membershps");
				s_ErrorMessage.Add(8494, "DS nc must have nc parent");
				s_ErrorMessage.Add(8496, "DS dst domain not native");
				s_ErrorMessage.Add(8497, "DS missing infrastructure container");
				s_ErrorMessage.Add(8498, "DS can't move account group");
				s_ErrorMessage.Add(8499, "DS can't move resource group");
				s_ErrorMessage.Add(8500, "DS invalid search flag");
				s_ErrorMessage.Add(8501, "DS no tree delete above nc");
				s_ErrorMessage.Add(8502, "DS couldn't lock tree for delete");
				s_ErrorMessage.Add(8503, "DS couldn't identify objects for tree delete");
				s_ErrorMessage.Add(8504, "DS sam init failure");
				s_ErrorMessage.Add(8505, "DS sensitive group violation");
				s_ErrorMessage.Add(8506, "DS can't mod primarygroupid");
				s_ErrorMessage.Add(8507, "DS illegal base schema mod");
				s_ErrorMessage.Add(8508, "DS nonsafe schema change");
				s_ErrorMessage.Add(8509, "DS schema update disallowed");
				s_ErrorMessage.Add(8510, "DS can't create under schema");
				s_ErrorMessage.Add(8511, "DS install no src sch version");
				s_ErrorMessage.Add(8512, "DS install no sch version in inifile");
				s_ErrorMessage.Add(8513, "DS invalid group type");
				s_ErrorMessage.Add(8514, "DS no nest globalgroup in mixeddomain");
				s_ErrorMessage.Add(8515, "DS no nest localgroup in mixeddomain");
				s_ErrorMessage.Add(8516, "DS global can't have local member");
				s_ErrorMessage.Add(8517, "DS global can't have universal member");
				s_ErrorMessage.Add(8518, "DS universal can't have local member");
				s_ErrorMessage.Add(8519, "DS global can't have crossdomain member");
				s_ErrorMessage.Add(8520, "DS local can't have crossdomain local member");
				s_ErrorMessage.Add(8521, "DS have primary members");
				s_ErrorMessage.Add(8522, "DS string sd conversion failed");
				s_ErrorMessage.Add(8523, "DS naming master gc");
				s_ErrorMessage.Add(8524, "DS lookup failure");
				s_ErrorMessage.Add(8525, "DS couldn't update spns");
				s_ErrorMessage.Add(8526, "DS can't retrieve sd");
				s_ErrorMessage.Add(8527, "DS key not unique");
				s_ErrorMessage.Add(8528, "DS wrong linked att syntax");
				s_ErrorMessage.Add(8529, "DS sam need bootkey password");
				s_ErrorMessage.Add(8530, "DS sam need bootkey floppy");
				s_ErrorMessage.Add(8531, "DS can't start");
				s_ErrorMessage.Add(8532, "DS init failure");
				s_ErrorMessage.Add(8533, "DS no pkt privacy on connection");
				s_ErrorMessage.Add(8534, "DS source domain in forest");
				s_ErrorMessage.Add(8535, "DS destination domain not in forest");
				s_ErrorMessage.Add(8536, "DS destination auditing not enabled");
				s_ErrorMessage.Add(8537, "DS can't find dc for src domain");
				s_ErrorMessage.Add(8538, "DS src obj not group or user");
				s_ErrorMessage.Add(8539, "DS src sid exists in forest");
				s_ErrorMessage.Add(8540, "DS src and dst object class mismatch");
				s_ErrorMessage.Add(8541, "Sam init failure");
				s_ErrorMessage.Add(8542, "DS dra schema info ship");
				s_ErrorMessage.Add(8543, "DS dra schema conflict");
				s_ErrorMessage.Add(8544, "DS dra earlier schema conflict");
				s_ErrorMessage.Add(8545, "DS dra obj nc mismatch");
				s_ErrorMessage.Add(8546, "DS nc still has dsas");
				s_ErrorMessage.Add(8547, "DS gc required");
				s_ErrorMessage.Add(8548, "DS local member of local only");
				s_ErrorMessage.Add(8549, "DS no fpo in universal groups");
				s_ErrorMessage.Add(8550, "DS can't add to gc");
				s_ErrorMessage.Add(8551, "DS no checkpoint with pdc");
				s_ErrorMessage.Add(8552, "DS source auditing not enabled");
				s_ErrorMessage.Add(8553, "DS can't create in nondomain nc");
				s_ErrorMessage.Add(8554, "DS invalid name for spn");
				s_ErrorMessage.Add(8555, "DS filter uses constructed attrs");
				s_ErrorMessage.Add(8556, "DS unicodepwd not in quotes");
				s_ErrorMessage.Add(8557, "DS machine account quota exceeded");
				s_ErrorMessage.Add(8558, "DS must be run on dst dc");
				s_ErrorMessage.Add(8559, "DS src dc must be sp4 or greater");
				s_ErrorMessage.Add(8560, "DS can't tree delete critical obj");
				s_ErrorMessage.Add(8561, "DS init failure console");
				s_ErrorMessage.Add(8562, "DS sam init failure console");
				s_ErrorMessage.Add(8563, "DS forest version too high");
				s_ErrorMessage.Add(8564, "DS domain version too high");
				s_ErrorMessage.Add(8565, "DS forest version too low");
				s_ErrorMessage.Add(8566, "DS domain version too low");
				s_ErrorMessage.Add(8567, "DS incompatible version");
				s_ErrorMessage.Add(8568, "DS low dsa version");
				s_ErrorMessage.Add(8569, "DS no behaviour version in mixeddomain");
				s_ErrorMessage.Add(8570, "DS not supported sort order");
				s_ErrorMessage.Add(8571, "DS name not unique");
				s_ErrorMessage.Add(8572, "DS machine account created prent4");
				s_ErrorMessage.Add(8573, "DS out of version store");
				s_ErrorMessage.Add(8574, "DS incompatible controls used");
				s_ErrorMessage.Add(8575, "DS no ref domain");
				s_ErrorMessage.Add(8576, "DS reserved link ID");
				s_ErrorMessage.Add(8577, "DS link ID not available");
				s_ErrorMessage.Add(8578, "DS ag can't have universal member");
				s_ErrorMessage.Add(8579, "DS modifydn disallowed by instance type");
				s_ErrorMessage.Add(8580, "DS no object move in schema nc");
				s_ErrorMessage.Add(8581, "DS modifydn disallowed by flag");
				s_ErrorMessage.Add(8582, "DS modifydn wrong grandparent");
				s_ErrorMessage.Add(8583, "DS name error trust referral");
				s_ErrorMessage.Add(8584, "Not supported on standard server");
				s_ErrorMessage.Add(8585, "DS can't access remote part of ad");
				s_ErrorMessage.Add(8586, "DS cr impossible to validate");
				s_ErrorMessage.Add(8587, "DS thread limit exceeded");
				s_ErrorMessage.Add(8588, "DS not closest");
				s_ErrorMessage.Add(8589, "DS can't derive spn without server ref");
				s_ErrorMessage.Add(8590, "DS single user mode failed");
				s_ErrorMessage.Add(8591, "DS ntdscript syntax error");
				s_ErrorMessage.Add(8592, "DS ntdscript process error");
				s_ErrorMessage.Add(8593, "DS different repl epochs");
				s_ErrorMessage.Add(8594, "DS drs extensions changed");
				s_ErrorMessage.Add(8595, "DS replica set change not allowed on disabled cr");
				s_ErrorMessage.Add(8596, "DS no msds intid");
				s_ErrorMessage.Add(8597, "DS dup msds intid");
				s_ErrorMessage.Add(8598, "DS exists in rdnattid");
				s_ErrorMessage.Add(8599, "DS authorisation failed");
				s_ErrorMessage.Add(8600, "DS invalid script");
				s_ErrorMessage.Add(8601, "DS remote crossref op failed");
				s_ErrorMessage.Add(9001, "DNS error rcode format error");
				s_ErrorMessage.Add(9002, "DNS error rcode server failure");
				s_ErrorMessage.Add(9003, "DNS error rcode name error");
				s_ErrorMessage.Add(9004, "DNS error rcode not implemented");
				s_ErrorMessage.Add(9005, "DNS error rcode refused");
				s_ErrorMessage.Add(9006, "DNS error rcode yxdomain");
				s_ErrorMessage.Add(9007, "DNS error rcode yxrrset");
				s_ErrorMessage.Add(9008, "DNS error rcode nxrrset");
				s_ErrorMessage.Add(9009, "DNS error rcode notauth");
				s_ErrorMessage.Add(9010, "DNS error rcode notzone");
				s_ErrorMessage.Add(9016, "DNS error rcode badsig");
				s_ErrorMessage.Add(9017, "DNS error rcode badkey");
				s_ErrorMessage.Add(9018, "DNS error rcode badtime");
				s_ErrorMessage.Add(9501, "DNS info no records");
				s_ErrorMessage.Add(9502, "DNS error bad packet");
				s_ErrorMessage.Add(9503, "DNS error no packet");
				s_ErrorMessage.Add(9504, "DNS error rcode");
				s_ErrorMessage.Add(9505, "DNS error unsecure packet");
				s_ErrorMessage.Add(9551, "DNS error invalid type");
				s_ErrorMessage.Add(9552, "DNS error invalid IP address");
				s_ErrorMessage.Add(9553, "DNS error invalid property");
				s_ErrorMessage.Add(9554, "DNS error try again later");
				s_ErrorMessage.Add(9555, "DNS error not unique");
				s_ErrorMessage.Add(9556, "DNS error non RFC name");
				s_ErrorMessage.Add(9557, "DNS status FQDN");
				s_ErrorMessage.Add(9558, "DNS status dotted name");
				s_ErrorMessage.Add(9559, "DNS status single part name");
				s_ErrorMessage.Add(9560, "DNS error invalid name char");
				s_ErrorMessage.Add(9561, "DNS error numeric name");
				s_ErrorMessage.Add(9562, "DNS error not allowed on root server");
				s_ErrorMessage.Add(9601, "DNS error zone does not exist");
				s_ErrorMessage.Add(9602, "DNS error not zone info");
				s_ErrorMessage.Add(9603, "DNS error invalid zone operation");
				s_ErrorMessage.Add(9604, "DNS error zone configuration error");
				s_ErrorMessage.Add(9605, "DNS error zone has not SOA record");
				s_ErrorMessage.Add(9606, "DNS error zone has no NS records");
				s_ErrorMessage.Add(9607, "DNS error zone locked");
				s_ErrorMessage.Add(9608, "DNS error zone creation failed");
				s_ErrorMessage.Add(9609, "DNS error zone already exists");
				s_ErrorMessage.Add(9610, "DNS error autozone already exists");
				s_ErrorMessage.Add(9611, "DNS error invalid zone type");
				s_ErrorMessage.Add(9612, "DNS error secondary requires master IP");
				s_ErrorMessage.Add(9613, "DNS error zone not secondary");
				s_ErrorMessage.Add(9614, "DNS error need secondary addresses");
				s_ErrorMessage.Add(9615, "DNS error wins init failed");
				s_ErrorMessage.Add(9616, "DNS error need wins servers");
				s_ErrorMessage.Add(9617, "DNS error nbstat init failed");
				s_ErrorMessage.Add(9618, "DNS error SOA delete invalid");
				s_ErrorMessage.Add(9619, "DNS error forwarder already exists");
				s_ErrorMessage.Add(9620, "DNS error zone requires master IP");
				s_ErrorMessage.Add(9621, "DNS error zone is shutdown");
				s_ErrorMessage.Add(9651, "DNS error primary requires datafile");
				s_ErrorMessage.Add(9652, "DNS error invalid datafile name");
				s_ErrorMessage.Add(9653, "DNS error datafile open failure");
				s_ErrorMessage.Add(9654, "DNS error file writeback failed");
				s_ErrorMessage.Add(9655, "DNS error datafile parsing");
				s_ErrorMessage.Add(9701, "DNS error record does not exist");
				s_ErrorMessage.Add(9702, "DNS error record format");
				s_ErrorMessage.Add(9703, "DNS error node creation failed");
				s_ErrorMessage.Add(9704, "DNS error unknown record type");
				s_ErrorMessage.Add(9705, "DNS error record timed out");
				s_ErrorMessage.Add(9706, "DNS error name not in zone");
				s_ErrorMessage.Add(9707, "DNS error CNAME loop");
				s_ErrorMessage.Add(9708, "DNS error node is CNAME");
				s_ErrorMessage.Add(9709, "DNS error CNAME collision");
				s_ErrorMessage.Add(9710, "DNS error record only at zone root");
				s_ErrorMessage.Add(9711, "DNS error record already exists");
				s_ErrorMessage.Add(9712, "DNS error secondary data");
				s_ErrorMessage.Add(9713, "DNS error no create cache data");
				s_ErrorMessage.Add(9714, "DNS error name does not exist");
				s_ErrorMessage.Add(9715, "DNS warning PTR create failed");
				s_ErrorMessage.Add(9716, "DNS warning domain undeleted");
				s_ErrorMessage.Add(9717, "DNS error ds unavailable");
				s_ErrorMessage.Add(9718, "DNS error ds zone already exists");
				s_ErrorMessage.Add(9719, "DNS error no bootfile if ds zone");
				s_ErrorMessage.Add(9751, "DNS info AXFR complete");
				s_ErrorMessage.Add(9752, "DNS error AXFR");
				s_ErrorMessage.Add(9753, "DNS info added local wins");
				s_ErrorMessage.Add(9801, "DNS status continue needed");
				s_ErrorMessage.Add(9851, "DNS error no TCPIP");
				s_ErrorMessage.Add(9852, "DNS error no DNS servers");
				s_ErrorMessage.Add(9901, "DNS error dp does not exist");
				s_ErrorMessage.Add(9902, "DNS error dp already exists");
				s_ErrorMessage.Add(9903, "DNS error dp not enlisted");
				s_ErrorMessage.Add(9904, "DNS error dp already enlisted");
				s_ErrorMessage.Add(10110, "E_NO_MORE");
				s_ErrorMessage.Add(10111, "E_CANCELLED");
				s_ErrorMessage.Add(11005, "QOS receivers");
				s_ErrorMessage.Add(11006, "QOS senders");
				s_ErrorMessage.Add(11007, "QOS no senders");
				s_ErrorMessage.Add(11008, "QOS no receivers");
				s_ErrorMessage.Add(11009, "QOS request confirmed");
				s_ErrorMessage.Add(11010, "QOS admission failure");
				s_ErrorMessage.Add(11011, "QOS policy failure");
				s_ErrorMessage.Add(11012, "QOS bad style");
				s_ErrorMessage.Add(11013, "QOS bad object");
				s_ErrorMessage.Add(11014, "QOS traffic ctrl error");
				s_ErrorMessage.Add(11015, "QOS generic error");
				s_ErrorMessage.Add(11016, "QOS eservicetype");
				s_ErrorMessage.Add(11017, "QOS eflowspec");
				s_ErrorMessage.Add(11018, "QOS eprovspecbuf");
				s_ErrorMessage.Add(11019, "QOS efilterstyle");
				s_ErrorMessage.Add(11020, "QOS efiltertype");
				s_ErrorMessage.Add(11021, "QOS efiltercount");
				s_ErrorMessage.Add(11022, "QOS eobjlength");
				s_ErrorMessage.Add(11023, "QOS eflowcount");
				s_ErrorMessage.Add(11024, "QOS eunknownpsobj");
				s_ErrorMessage.Add(11025, "QOS epolicyobj");
				s_ErrorMessage.Add(11026, "QOS eflowdesc");
				s_ErrorMessage.Add(11027, "QOS epsflowspec");
				s_ErrorMessage.Add(11028, "QOS epsfilterspec");
				s_ErrorMessage.Add(11029, "QOS esdmodeobj");
				s_ErrorMessage.Add(11030, "QOS eshaperateobj");
				s_ErrorMessage.Add(11031, "QOS reserved petype");
				s_ErrorMessage.Add(13000, "IPSEC qm policy exists");
				s_ErrorMessage.Add(13001, "IPSEC qm policy not found");
				s_ErrorMessage.Add(13002, "IPSEC qm policy in use");
				s_ErrorMessage.Add(13003, "IPSEC mm policy exists");
				s_ErrorMessage.Add(13004, "IPSEC mm policy not found");
				s_ErrorMessage.Add(13005, "IPSEC mm policy in use");
				s_ErrorMessage.Add(13006, "IPSEC mm filter exists");
				s_ErrorMessage.Add(13007, "IPSEC mm filter not found");
				s_ErrorMessage.Add(13008, "IPSEC transport filter exists");
				s_ErrorMessage.Add(13009, "IPSEC transport filter not found");
				s_ErrorMessage.Add(13010, "IPSEC mm auth exists");
				s_ErrorMessage.Add(13011, "IPSEC mm auth not found");
				s_ErrorMessage.Add(13012, "IPSEC mm auth in use");
				s_ErrorMessage.Add(13013, "IPSEC default mm policy not found");
				s_ErrorMessage.Add(13014, "IPSEC default mm auth not found");
				s_ErrorMessage.Add(13015, "IPSEC default qm policy not found");
				s_ErrorMessage.Add(13016, "IPSEC tunnel filter exists");
				s_ErrorMessage.Add(13017, "IPSEC tunnel filter not found");
				s_ErrorMessage.Add(13018, "IPSEC mm filter pending deletion");
				s_ErrorMessage.Add(13019, "IPSEC transport filter pending deletion");
				s_ErrorMessage.Add(13020, "IPSEC tunnel filter pending deletion");
				s_ErrorMessage.Add(13021, "IPSEC mm policy pending deletion");
				s_ErrorMessage.Add(13022, "IPSEC mm auth pending deletion");
				s_ErrorMessage.Add(13023, "IPSEC qm policy pending deletion");
				s_ErrorMessage.Add(13801, "IPSEC IKE auth fail");
				s_ErrorMessage.Add(13802, "IPSEC IKE attrib fail");
				s_ErrorMessage.Add(13803, "IPSEC IKE negotiation pending");
				s_ErrorMessage.Add(13804, "IPSEC IKE general processing error");
				s_ErrorMessage.Add(13805, "IPSEC IKE timed out");
				s_ErrorMessage.Add(13806, "IPSEC IKE no cert");
				s_ErrorMessage.Add(13807, "IPSEC IKE sa deleted");
				s_ErrorMessage.Add(13808, "IPSEC IKE sa reaped");
				s_ErrorMessage.Add(13809, "IPSEC IKE mm acquire drop");
				s_ErrorMessage.Add(13810, "IPSEC IKE qm acquire drop");
				s_ErrorMessage.Add(13811, "IPSEC IKE queue drop mm");
				s_ErrorMessage.Add(13812, "IPSEC IKE queue drop no mm");
				s_ErrorMessage.Add(13813, "IPSEC IKE drop no response");
				s_ErrorMessage.Add(13814, "IPSEC IKE mm delay drop");
				s_ErrorMessage.Add(13815, "IPSEC IKE qm delay drop");
				s_ErrorMessage.Add(13816, "IPSEC IKE error");
				s_ErrorMessage.Add(13817, "IPSEC IKE crl failed");
				s_ErrorMessage.Add(13818, "IPSEC IKE invalid key usage");
				s_ErrorMessage.Add(13819, "IPSEC IKE invalid cert type");
				s_ErrorMessage.Add(13820, "IPSEC IKE no private key");
				s_ErrorMessage.Add(13822, "IPSEC IKE dh fail");
				s_ErrorMessage.Add(13824, "IPSEC IKE invalid header");
				s_ErrorMessage.Add(13825, "IPSEC IKE no policy");
				s_ErrorMessage.Add(13826, "IPSEC IKE invalid signature");
				s_ErrorMessage.Add(13827, "IPSEC IKE kerberos error");
				s_ErrorMessage.Add(13828, "IPSEC IKE no public key");
				s_ErrorMessage.Add(13829, "IPSEC IKE process err");
				s_ErrorMessage.Add(13830, "IPSEC IKE process err sa");
				s_ErrorMessage.Add(13831, "IPSEC IKE process err prop");
				s_ErrorMessage.Add(13832, "IPSEC IKE process err trans");
				s_ErrorMessage.Add(13833, "IPSEC IKE process err ke");
				s_ErrorMessage.Add(13834, "IPSEC IKE process err ID");
				s_ErrorMessage.Add(13835, "IPSEC IKE process err cert");
				s_ErrorMessage.Add(13836, "IPSEC IKE process err cert req");
				s_ErrorMessage.Add(13837, "IPSEC IKE process err hash");
				s_ErrorMessage.Add(13838, "IPSEC IKE process err sig");
				s_ErrorMessage.Add(13839, "IPSEC IKE process err nonce");
				s_ErrorMessage.Add(13840, "IPSEC IKE process err notify");
				s_ErrorMessage.Add(13841, "IPSEC IKE process err delete");
				s_ErrorMessage.Add(13842, "IPSEC IKE process err vendor");
				s_ErrorMessage.Add(13843, "IPSEC IKE invalid payload");
				s_ErrorMessage.Add(13844, "IPSEC IKE load soft sa");
				s_ErrorMessage.Add(13845, "IPSEC IKE soft sa torn down");
				s_ErrorMessage.Add(13846, "IPSEC IKE invalid cookie");
				s_ErrorMessage.Add(13847, "IPSEC IKE no peer cert");
				s_ErrorMessage.Add(13848, "IPSEC IKE peer CRL failed");
				s_ErrorMessage.Add(13849, "IPSEC IKE policy change");
				s_ErrorMessage.Add(13850, "IPSEC IKE no mm policy");
				s_ErrorMessage.Add(13851, "IPSEC IKE notcbpriv");
				s_ErrorMessage.Add(13852, "IPSEC IKE secloadfail");
				s_ErrorMessage.Add(13853, "IPSEC IKE failsspinit");
				s_ErrorMessage.Add(13854, "IPSEC IKE failqueryssp");
				s_ErrorMessage.Add(13855, "IPSEC IKE srvacqfail");
				s_ErrorMessage.Add(13856, "IPSEC IKE srvquerycred");
				s_ErrorMessage.Add(13857, "IPSEC IKE getspifail");
				s_ErrorMessage.Add(13858, "IPSEC IKE invalid filter");
				s_ErrorMessage.Add(13859, "IPSEC IKE out of memory");
				s_ErrorMessage.Add(13860, "IPSEC IKE add update key failed");
				s_ErrorMessage.Add(13861, "IPSEC IKE invalid policy");
				s_ErrorMessage.Add(13862, "IPSEC IKE unknown doi");
				s_ErrorMessage.Add(13863, "IPSEC IKE invalid situation");
				s_ErrorMessage.Add(13864, "IPSEC IKE dh failure");
				s_ErrorMessage.Add(13865, "IPSEC IKE invalid group");
				s_ErrorMessage.Add(13866, "IPSEC IKE encrypt");
				s_ErrorMessage.Add(13867, "IPSEC IKE decrypt");
				s_ErrorMessage.Add(13868, "IPSEC IKE policy match");
				s_ErrorMessage.Add(13869, "IPSEC IKE unsupported ID");
				s_ErrorMessage.Add(13870, "IPSEC IKE invalid hash");
				s_ErrorMessage.Add(13871, "IPSEC IKE invalid hash alg");
				s_ErrorMessage.Add(13872, "IPSEC IKE invalid hash size");
				s_ErrorMessage.Add(13873, "IPSEC IKE invalid encrypt alg");
				s_ErrorMessage.Add(13874, "IPSEC IKE invalid auth alg");
				s_ErrorMessage.Add(13875, "IPSEC IKE invalid sig");
				s_ErrorMessage.Add(13876, "IPSEC IKE load failed");
				s_ErrorMessage.Add(13877, "IPSEC IKE rpc delete");
				s_ErrorMessage.Add(13878, "IPSEC IKE benign reinit");
				s_ErrorMessage.Add(13879, "IPSEC IKE invalid responder lifetime notify");
				s_ErrorMessage.Add(13881, "IPSEC IKE invalid cert keylen");
				s_ErrorMessage.Add(13882, "IPSEC IKE mm limit");
				s_ErrorMessage.Add(13883, "IPSEC IKE negotiation disabled");
				s_ErrorMessage.Add(13884, "IPSEC IKE neg status end");
				s_ErrorMessage.Add(100001, "Device not configured");
				s_ErrorMessagesInitialized = true;
			}
		}
	}
}
