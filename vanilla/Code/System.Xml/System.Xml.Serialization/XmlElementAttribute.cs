using System.Xml.Schema;

namespace System.Xml.Serialization;

/// <summary>Indicates that a public field or property represents an XML element when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes or deserializes the object that contains it.</summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.ReturnValue, AllowMultiple = true)]
public class XmlElementAttribute : Attribute
{
	private string elementName;

	private Type type;

	private string ns;

	private string dataType;

	private bool nullable;

	private bool nullableSpecified;

	private XmlSchemaForm form;

	private int order = -1;

	/// <summary>Gets or sets the object type used to represent the XML element.</summary>
	/// <returns>The <see cref="T:System.Type" /> of the member.</returns>
	public Type Type
	{
		get
		{
			return type;
		}
		set
		{
			type = value;
		}
	}

	/// <summary>Gets or sets the name of the generated XML element.</summary>
	/// <returns>The name of the generated XML element. The default is the member identifier.</returns>
	public string ElementName
	{
		get
		{
			if (elementName != null)
			{
				return elementName;
			}
			return string.Empty;
		}
		set
		{
			elementName = value;
		}
	}

	/// <summary>Gets or sets the namespace assigned to the XML element that results when the class is serialized.</summary>
	/// <returns>The namespace of the XML element.</returns>
	public string Namespace
	{
		get
		{
			return ns;
		}
		set
		{
			ns = value;
		}
	}

	/// <summary>Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
	/// <returns>An XML Schema data type, as defined by the World Wide Web Consortium (www.w3.org) document named "XML Schema Part 2: Datatypes".</returns>
	/// <exception cref="T:System.Exception">The XML Schema data type you have specified cannot be mapped to the.NET data type. </exception>
	public string DataType
	{
		get
		{
			if (dataType != null)
			{
				return dataType;
			}
			return string.Empty;
		}
		set
		{
			dataType = value;
		}
	}

	/// <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must serialize a member that is set to null as an empty tag with the xsi:nil attribute set to true.</summary>
	/// <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates the xsi:nil attribute; otherwise, false.</returns>
	public bool IsNullable
	{
		get
		{
			return nullable;
		}
		set
		{
			nullable = value;
			nullableSpecified = true;
		}
	}

	internal bool IsNullableSpecified => nullableSpecified;

	/// <summary>Gets or sets a value that indicates whether the element is qualified.</summary>
	/// <returns>One of the <see cref="T:System.Xml.Schema.XmlSchemaForm" /> values. The default is <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />.</returns>
	public XmlSchemaForm Form
	{
		get
		{
			return form;
		}
		set
		{
			form = value;
		}
	}

	/// <summary>Gets or sets the explicit order in which the elements are serialized or deserialized.</summary>
	/// <returns>The order of the code generation.</returns>
	public int Order
	{
		get
		{
			return order;
		}
		set
		{
			if (value < 0)
			{
				throw new ArgumentException(Res.GetString("Negative values are prohibited."), "Order");
			}
			order = value;
		}
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</summary>
	public XmlElementAttribute()
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies the name of the XML element.</summary>
	/// <param name="elementName">The XML element name of the serialized member. </param>
	public XmlElementAttribute(string elementName)
	{
		this.elementName = elementName;
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This type is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing object that contains it.</summary>
	/// <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
	public XmlElementAttribute(Type type)
	{
		this.type = type;
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> and specifies the name of the XML element and a derived type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied. This member type is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes the object that contains it.</summary>
	/// <param name="elementName">The XML element name of the serialized member. </param>
	/// <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
	public XmlElementAttribute(string elementName, Type type)
	{
		this.elementName = elementName;
		this.type = type;
	}
}
