using System.Collections;
using System.Globalization;

namespace System.Xml.Serialization;

/// <summary>Maintains a group of names for related code entities or type mappings that are generated by the .NET Framework's XML serialization infrastructure.</summary>
public class CodeIdentifiers
{
	private Hashtable identifiers;

	private Hashtable reservedIdentifiers;

	private ArrayList list;

	private bool camelCase;

	/// <summary>Gets or sets a value that indicates whether the instance uses camel case. </summary>
	/// <returns>true to indicate that the instance uses camel case; false to indicate that the instance uses Pascal case.</returns>
	public bool UseCamelCasing
	{
		get
		{
			return camelCase;
		}
		set
		{
			camelCase = value;
		}
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class. </summary>
	public CodeIdentifiers()
		: this(caseSensitive: true)
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> class and determines whether code identifiers are case sensitive.</summary>
	/// <param name="caseSensitive">true if identifiers are case sensitive; otherwise, false. </param>
	public CodeIdentifiers(bool caseSensitive)
	{
		if (caseSensitive)
		{
			identifiers = new Hashtable();
			reservedIdentifiers = new Hashtable();
		}
		else
		{
			IEqualityComparer equalityComparer = new CaseInsensitiveKeyComparer();
			identifiers = new Hashtable(equalityComparer);
			reservedIdentifiers = new Hashtable(equalityComparer);
		}
		list = new ArrayList();
	}

	/// <summary>Removes all code entities or type mappings, including their names, from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
	public void Clear()
	{
		identifiers.Clear();
		list.Clear();
	}

	/// <summary>Ensures that the input is of the correct case by modifying the name according to the value of the <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" /> property. </summary>
	/// <returns>A string that is the same as the input identifier or has the first letter's case modified.</returns>
	/// <param name="identifier">The name to possibly modify.</param>
	public string MakeRightCase(string identifier)
	{
		if (camelCase)
		{
			return CodeIdentifier.MakeCamel(identifier);
		}
		return CodeIdentifier.MakePascal(identifier);
	}

	/// <summary>Determines whether the input name conflicts with another name within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope and, if it does, generates a modified string. </summary>
	/// <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
	/// <param name="identifier">The name to modify if it is not already unique.</param>
	public string MakeUnique(string identifier)
	{
		if (IsInUse(identifier))
		{
			int num = 1;
			string text;
			while (true)
			{
				text = identifier + num.ToString(CultureInfo.InvariantCulture);
				if (!IsInUse(text))
				{
					break;
				}
				num++;
			}
			identifier = text;
		}
		if (identifier.Length > 511)
		{
			return MakeUnique("Item");
		}
		return identifier;
	}

	/// <summary>Prevents a specified name from being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
	/// <param name="identifier">A name that will not be available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" />instance's scope.</param>
	public void AddReserved(string identifier)
	{
		reservedIdentifiers.Add(identifier, identifier);
	}

	/// <summary>Removes the input name from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's reserved names. </summary>
	/// <param name="identifier">A name that will be made available within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
	public void RemoveReserved(string identifier)
	{
		reservedIdentifiers.Remove(identifier);
	}

	/// <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope, ensuring that the name is unique within the scope. </summary>
	/// <returns>The identifier parameter value or a modified string if there is a name collision.</returns>
	/// <param name="identifier">A candidate name that is used to index the code entity.</param>
	/// <param name="value">The code entity or type mapping information.</param>
	public string AddUnique(string identifier, object value)
	{
		identifier = MakeUnique(identifier);
		Add(identifier, value);
		return identifier;
	}

	/// <summary>Determines whether a specified name is already being used within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
	/// <returns>true if the name is already in use; otherwise, false.</returns>
	/// <param name="identifier">The name to check for use within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope.</param>
	public bool IsInUse(string identifier)
	{
		if (!identifiers.Contains(identifier))
		{
			return reservedIdentifiers.Contains(identifier);
		}
		return true;
	}

	/// <summary>Adds a named code entity or type mapping to the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
	/// <param name="identifier">A name that is used to index the code entity.</param>
	/// <param name="value">The code entity or type mapping information.</param>
	public void Add(string identifier, object value)
	{
		identifiers.Add(identifier, value);
		list.Add(value);
	}

	/// <summary>Removes from the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope the code entity or type mapping identified by the input name. </summary>
	/// <param name="identifier">The name of the code entity or type mapping information to remove.</param>
	public void Remove(string identifier)
	{
		list.Remove(identifiers[identifier]);
		identifiers.Remove(identifier);
	}

	/// <summary>Returns an array of the code entities or type mappings within the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> instance's scope. </summary>
	/// <returns>An array of the code entities or type mappings that is stored by the <see cref="T:System.Xml.Serialization.CodeIdentifiers" /> object.</returns>
	/// <param name="type">The type of all the code entities or type mappings for the instance.</param>
	public object ToArray(Type type)
	{
		Array array = Array.CreateInstance(type, list.Count);
		list.CopyTo(array, 0);
		return array;
	}

	internal CodeIdentifiers Clone()
	{
		return new CodeIdentifiers
		{
			identifiers = (Hashtable)identifiers.Clone(),
			reservedIdentifiers = (Hashtable)reservedIdentifiers.Clone(),
			list = (ArrayList)list.Clone(),
			camelCase = camelCase
		};
	}
}
